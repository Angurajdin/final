-- phpMyAdmin SQL Dump
-- version 5.0.4
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Feb 26, 2021 at 05:27 AM
-- Server version: 10.4.17-MariaDB
-- PHP Version: 7.4.13

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `cla`
--

-- --------------------------------------------------------

--
-- Table structure for table `cpp_lang`
--

CREATE TABLE `cpp_lang` (
  `id` int(2) NOT NULL,
  `indextopic` text NOT NULL,
  `content` text NOT NULL,
  `syntax` text DEFAULT NULL,
  `syntaxdef` text DEFAULT NULL,
  `syntax2` text DEFAULT NULL,
  `syntaxdef2` text DEFAULT NULL,
  `example` text DEFAULT NULL,
  `exampledef` text DEFAULT NULL,
  `example2` text DEFAULT NULL,
  `exampledef2` text DEFAULT NULL,
  `searchword` text DEFAULT NULL,
  `keyword` text DEFAULT NULL,
  `diagram1` text DEFAULT NULL,
  `diagram2` text DEFAULT NULL,
  `diagram3` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `cpp_lang`
--

INSERT INTO `cpp_lang` (`id`, `indextopic`, `content`, `syntax`, `syntaxdef`, `syntax2`, `syntaxdef2`, `example`, `exampledef`, `example2`, `exampledef2`, `searchword`, `keyword`, `diagram1`, `diagram2`, `diagram3`) VALUES
(1, 'Introduction to C++', '<p>\r\nC++, as we all know is an extension to C language and was developed by <b>Bjarne stroustrup</b> at bell labs.\r\nC++ is an intermediate level language, as it comprises a confirmation of both high level and low level language features.\r\nC++ is a statically typed, free form, multiparadigm, compiled general-purpose language.\r\n</p>\r\n<p>C++ is an <b>Object Oriented Programming language</b> but is not purely Object Oriented. Its features like <code>Friend</code> and <code>Virtual</code>, violate some of the very important OOPS features, rendering this language unworthy of being called completely Object Oriented. Its a middle level language.</p>\r\n<HR>\r\n<HR>\r\n<h2 id=\"about\">About C++ Programming</h2>\r\n<ul>\r\n	<li><strong>Multi-paradigm Language</strong> - C++ supports at least seven different styles of programming. Developers can choose any of the styles.</li>\r\n	<li><strong>General Purpose Language</strong> - You can use C++ to develop games, desktop apps, operating systems, and so on.</li>\r\n	<li><strong>Speed</strong> - Like C programming, the performance of optimized C++ code is exceptional.</li>\r\n	<li><strong>Object-oriented</strong> - C++ allows you to divide complex problems into smaller sets by using objects.</li>\r\n</ul>\r\n<HR>\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'c++ cpp', NULL, NULL, NULL),
(2, 'Why Learn C++?', '<ul>\r\n	<li>C++ is used to develop games, desktop apps, operating systems, browsers, and so on because of its performance.</li>\r\n	<li>After learning C++, it will be much easier to learn other programming languages like Java, Python, etc.</li>\r\n	<li>C++ helps you to understand the internal architecture of a computer, how computer stores and retrieves information.</li>\r\n</ul>\r\n<HR>\r\n<h1 class=\"h1\">C++ Features</h1>\r\n<p>C++ is object oriented programming language. It provides a lot of <strong>features</strong> that are given below.</p>\r\n<ol class=\"points\">\r\n<li>Simple</li>\r\n<li>Machine Independent or Portable</li>\r\n<li>Mid-level programming language</li>\r\n<li>Structured programming language</li>\r\n<li>Rich Library</li>\r\n<li>Memory Management</li>\r\n<li>Fast Speed</li>\r\n<li>Pointers</li>\r\n<li>Recursion</li>\r\n<li>Extensible</li>\r\n<li>Object Oriented</li>\r\n<li>Compiler based</li>\r\n</ol>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(3, 'Object Oriented Programming in C++', '<p>C++ fully supports object-oriented programming, including the four pillars of object-oriented development âˆ’</p>\r\n<ul class=\"list\">\r\n<li>Encapsulation</li>\r\n<li>Data hiding</li>\r\n<li>Inheritance</li>\r\n<li>Polymorphism</li>\r\n</ul>\r\n<HR>\r\n<HR>\r\n<p>Let us try to understand a little about all these, through a simple example. Human Beings are living forms, broadly categorized into two types, Male and Female. Right? Its true. Every Human being(Male or Female) has two legs, two hands, two eyes, one nose, one heart etc. There are body parts that are common for Male and Female, but then there are some specific body parts, present in a Male which are not present in a Female, and some body parts present in Female but not in Males.</p>\r\n<p>All Human Beings walk, eat, see, talk, hear etc. Now again, both Male and Female, performs some common functions, but there are some specifics to both, which is not valid for the other. For example : A Female can give birth, while a Male cannot, so this is only for the Female.</p>\r\n<p>Human Anatomy is interesting, isn\'t it? But let\'s see how all this is related to C++ and OOPS. Here we will try to explain all the OOPS concepts through this example and later we will have the technical definitons for all this.</p>\r\n<BR>', '<h3>Class</h3>\r\n<p>Here we can take <b>Human Being</b> as a class. A class is a blueprint for any functional entity which defines its properties and its functions. Like Human Being, having body parts, and performing various actions.</p>\r\n<HR>\r\n<h3>Inheritance</h3>\r\n<p>Considering <code>HumanBeing</code> a class, which has properties like hands, legs, eyes etc, and functions like walk, talk, eat, see etc. <code>Male</code> and <code>Female</code> are also classes, but most of the properties and functions are included in <code>HumanBeing</code>, hence they can inherit everything from class <code>HumanBeing</code> using the concept of <b>Inheritance</b>.</p>\r\n<HR>\r\n<h3>Objects</h3>\r\n<p>My name is Abhishek, and I am an <b>instance/object</b> of class <code>Male</code>. When we say, Human Being, Male or Female, we just mean a kind, you, your friend, me we are the forms of these classes. We have a physical existence while a class is just a logical definition. We are the objects.</p>\r\n<HR>\r\n<h3>Abstraction</h3>\r\n<p>Abstraction means, showcasing only the required things to the outside world while hiding the details. Continuing our example, <b>Human Being\'s</b> can talk, walk, hear, eat, but the details are hidden from the outside world. We can take our skin as the Abstraction factor in our case, hiding the inside mechanism.</p>\r\n<HR>\r\n<h3>Encapsulation</h3>\r\n<p>This concept is a little tricky to explain with our example. Our Legs are binded to help us walk. Our hands, help us hold things. This binding of the properties to functions is called Encapsulation.</p>\r\n<HR>\r\n<h3>Polymorphism</h3>\r\n<p>Polymorphism is a concept, which allows us to redefine the way something works, by either changing how it is done or by changing the parts using which it is done. Both the ways have different terms for them.</p>\r\n<p>If we walk using our hands, and not legs, here we will change the parts used to perform something. Hence this is called <b>Overloading</b>.</p>\r\n<p>And if there is a defined way of walking, but I wish to walk differently, but using my legs, like everyone else. Then I can walk like I want, this will be called as <b>Overriding</b>.</p>\r\n<HR>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'oops', NULL, NULL, NULL),
(4, 'OOPS Concept Definitions', '<p>Now, let us discuss some of the main features of Object Oriented Programming which you will be using in C++(technically).\r\n</p><ol class=\"content\">\r\n<li>Objects</li>\r\n<li>Classes</li>\r\n<li>Abstraction</li>\r\n<li>Encapsulation</li>\r\n<li>Inheritance</li>\r\n<li>Overloading</li>\r\n<li>Exception Handling</li>\r\n</ol>', '<h3>Objects</h3><p>Objects are the basic unit of OOP. They are instances of class, which have data members and uses various member functions to perform tasks. </p>\r\n<hr>\r\n<h3>Class</h3><p>It is similar to structures in C language. Class can also be defined as user defined data type but it also contains functions in it.\r\nSo, class is basically a blueprint for object. It declare &amp; defines what data variables the object will have and what operations can be performed on the class\'s object. </p>\r\n<hr>\r\n<h3>Abstraction</h3><p>Abstraction refers to showing only the essential features of the application and hiding the details. In C++, classes can provide methods to the outside world to access &amp; use the data variables, keeping the variables hidden from direct access, or classes can even declare everything accessible to everyone, or maybe just to the classes inheriting it. This can be done using access specifiers.\r\n</p>\r\n<hr>\r\n<h3>Encapsulation</h3><p>It can also be said data binding. Encapsulation is all about binding the data variables and functions together in class.</p>\r\n<hr>\r\n<h3>Inheritance</h3><p>Inheritance is a way to reuse once written code again and again. The class which is inherited is called the <b>Base</b> class &amp; the class which inherits is called the <b>Derived</b> class. They are also called parent and child class.</p><p>So when, a derived class inherits a base class, the derived class can use all the functions which are defined in base class, hence making code reusable. </p>\r\n<hr>\r\n<h3>Polymorphism</h3><p>It is a feature, which lets us create functions with same name but different arguments, which will perform different actions. That means, functions with same name, but functioning in different ways. Or, it also allows us to redefine a function to provide it with a completely new definition. You will learn how to do this in details soon in coming lessons.</p>\r\n<hr>\r\n<h3>Exception Handling</h3><p>Exception handling is a feature of OOP, to handle unresolved exceptions or errors produced at runtime.</p>\r\n<hr><hr>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Objects\r\nClasses\r\nAbstraction\r\nEncapsulation\r\nInheritance\r\nOverloading\r\nException Handling\r\nPolymorphism', NULL, NULL, NULL),
(5, 'Basic Concepts of C++', '<p>In this section we will cover the basics of C++, it will include the syntax, variable, operators, loop types, pointers, references and information about other requirements of a C++ program.\r\nYou will come across lot of terms that you have already studied in C language.\r\n</p>\r\n<Hr><h2>Syntax and Structure of C++ program</h2><p>Here we will discuss one simple and basic C++ program to print \"Hello this is C++\" and its structure in parts with details and uses.</p>', '<pre class=\"cpp language-clike\"><code class=\" language-clike\">#include <span class=\"token operator\">&lt;</span>iostream<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\nusing namespace std<span class=\"token punctuation\">;</span>\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"Hello this is C++\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', '<p><b>Header files</b> are included at the beginning just like in C program. Here <code>iostream</code> is a header file which provides us with input &amp; output streams. Header files contained predeclared function libraries, which can be used by users for their ease.\r\n</p><HR><p><b>Using namespace std</b>, tells the compiler to use standard namespace. Namespace collects identifiers used for class, object and variables. NameSpace can be used by two ways in a program, either by the use of <code>using</code> statement at the beginning, like we did in above mentioned program or by using name of namespace as prefix before the identifier with scope resolution (::) operator. </p><p><i>Example:</i> <code>std::cout &lt;&lt; \"A\";</code></p><br><p>\r\n<b>main()</b>, is the function which holds the executing part of program its return type is <code>int</code>.\r\n</p><p><b>cout &lt;&lt;</b>, is used to print anything on screen, same as <code>printf</code> in C language. <b>cin</b> and <b>cout</b> are same as <code>scanf</code> and <code>printf</code>, only difference is that you do not need to mention format specifiers like, <code>%d</code> for <code>int</code> etc, in <code>cout</code> &amp; <code>cin</code>. </p><br>', NULL, NULL, '<h3>First C++ program</h3>\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(6, 'Comments in C++ Program', '', '<p>For single line comments, use <b>//</b> before mentioning comment, like\r\n</p><pre class=\"cpp language-clike\"><code class=\" language-clike\">cout<span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token string\">\"single line\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// This is single line comment</span>\r\n</code></pre><hr>\r\nFor multiple line comment, enclose the comment between <b>/*</b> and <b>*/</b><pre class=\"cpp language-clike\"><code class=\" language-clike\"><span class=\"token comment\">/*this is \r\n  a multiple line \r\n  comment */</span></code></pre>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(7, 'Creating Classes in C++', '<p>Classes name must start with capital letter, and they contain data variables and member functions. This is a mere introduction to classes, we will discuss classes in detail throughout the C++ tutorial.</p>', '<pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Abc</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int i<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//data variable</span>\r\n    void <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">//Member Function</span>\r\n    <span class=\"token punctuation\">{</span> \r\n        cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"Inside Member Function\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Class ends here</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Abc obj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Creatig Abc class\'s object</span>\r\n    obj<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Calling member function using class object</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', '<p>This is how a class is defined, once a class is defined, then its object is created and the member functions are used. </p><p>Variables can be declared anywhere in the entire program, but must be declared, before they are used. Hence, we don\'t need to declare variable at the start of the program.\r\n</p><p>Don\'t worry this is just to give you a basic idea about C++ language, we will cover everything in details in next tutorials.</p>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Creating Classes', NULL, NULL, NULL),
(8, 'Datatypes in C++', '<p>Let\'s start with Datatypes. They are used to define type of variables and contents used. Data types define the way you use storage in the programs you write.\r\nData types can be of two types:</p><ol class=\"content\">\r\n<li>Built-in Datatypes</li>\r\n<li>User-defined or Abstract Datatypes</li>\r\n<p>Let\'s start with Datatypes. They are used to define type of variables and contents used. Data types define the way you use storage in the programs you write.\r\nData types can be of two types:</p></ol><hr><h2>Built-in Data Types</h2><p>These are the datatypes which are predefined and are wired directly into the compiler. For eg: <code>int</code>, <code>char</code> etc.</p>\r\n<hr>\r\n<h2>User defined or Abstract data types</h2><p>These are the type, that user creates as a class or a structure. In C++ these are classes where as in C language user-defined datatypes were implemented as structures.\r\n</p>\r\n<hr><hr>', '<h3>Basic Built in Datatypes in C++</h3><table class=\"table table-bordered\">\r\n<tbody><tr><td><code>char</code></td><td>for character storage (1 byte)</td></tr>\r\n<tr><td><code>int</code></td><td>for integral number (2 bytes)</td></tr>\r\n<tr><td><code>float</code></td><td>single precision floating point (4 bytes)</td></tr>\r\n<tr><td><code>double</code></td><td>double precision floating point numbers (8 bytes)</td></tr>\r\n</tbody></table><hr><hr><h3>Other Built in Datatypes in C++</h3><table class=\"table table-bordered\">\r\n<tbody><tr><td><code>bool</code></td><td>Boolean (True or False)</td></tr>\r\n<tr><td><code>void</code></td><td>Without any Value</td></tr>\r\n<tr><td><code>wchar_t</code></td><td>Wide Character</td></tr>\r\n</tbody></table>', NULL, NULL, NULL, '<pre class=\"cpp language-clike\"><code class=\" language-clike\">char a <span class=\"token operator\">=</span> <span class=\"token string\">\'A\'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// character type</span>\r\nint a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// integer type</span>\r\nfloat a <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// floating point type </span>\r\ndouble a <span class=\"token operator\">=</span> <span class=\"token number\">6e-4</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// double type (e is for exponential)</span>\r\n</code></pre>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(9, 'Modifiers in C++', '<p>In C++, special words(called <b>modifiers</b>) can be used to modify the meaning of the predefined built-in data types and expand them to a much larger set. There are four datatype modifiers in C++, they are:</p><ol class=\"content\">\r\n<li><code>long</code></li>\r\n<li><code>short</code></li>\r\n<li><code>signed</code></li>\r\n<li><code>unsigned</code></li>\r\n</ol><p>The above mentioned modifiers can be used along with built in datatypes to make them more precise and even expand their range.</p>', '<p>Below mentioned are some important points you must know about the modifiers,</p><ul class=\"content\">\r\n<li><b>long</b> and <b>short</b> modify the maximum and minimum values that a data type will hold.</li>\r\n<li>A plain int must have a minimum size of <b>short</b>.</li>\r\n<li>Size hierarchy : <code> short int &lt; int &lt; long int </code></li>\r\n<li>Size hierarchy for floating point numbers is : <code> float &lt; double &lt; long double </code></li>\r\n<li><b>long float</b> is not a legal type and there are no <b>short floating point</b> numbers.</li>\r\n<li><b>Signed</b> types includes both positive and negative numbers and is the default type.</li>\r\n<li><b>Unsigned</b>, numbers are always without any sign, that is always positive.</li>\r\n</ul>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Modifier', NULL, NULL, NULL),
(10, 'Variables in C++\r\n', '<p>Variable are used in C++, where we need storage for any value, which will change in program.\r\nVariable can be declared in multiple ways each with different memory requirements and functioning.\r\nVariable is the name of memory location allocated by the compiler depending upon the datatype of the variable.\r\n</p>', '<h3>Basic types of Variables</h3>\r\n<p>Each variable while declaration must be given a datatype, on which the memory assigned to the variable depends. Following are the basic types of variables,\r\n</p>\r\n<table class=\"table table-bordered\">\r\n<tbody><tr><td><code>bool</code></td><td>For variable to store boolean values( True or False )</td></tr>\r\n<tr><td><code>char</code></td><td>For variables to store character types.</td></tr>\r\n<tr><td><code>int</code></td><td>for variable with integral values</td></tr>\r\n<tr><td colspan=\"2\"><code>float</code> and <code>double</code> are also types for variables with large and floating point values</td></tr>\r\n</tbody></table>', '<h3>Declaration and Initialization</h3>\r\n<p>Variable must be declared before they are used. Usually it is preferred to declare them at the starting of the program, but in C++ they can be declared in the middle of program too, but must be done before using them. </p>', NULL, NULL, '<pre class=\"cpp language-clike\"><code class=\" language-clike\">int i<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// declared but not initialised</span>\r\nchar c<span class=\"token punctuation\">;</span> \r\nint i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Multiple declaration</span>\r\n</code></pre>\r\n<HR>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">int i<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// declaration</span>\r\ni <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// initialization</span>\r\n</code></pre>\r\n<HR>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">int i<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//initialization and declaration in same step</span>\r\nint i<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\r\n</code></pre>\r\n<HR>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">int i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\r\ni<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\nj<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\r\nint j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//compile time error, cannot redeclare a variable in same scope</span>\r\n</code></pre>', NULL, NULL, NULL, NULL, 'variables', NULL, NULL, NULL),
(11, 'Scope of Variables', '<p>All the variables have their area of functioning, and out of that boundary they don\'t hold their value, this boundary is called scope of the variable. For most of the cases its between the curly braces,in which variable is declared that a variable exists, not outside it. We will study the storage classes later, but as of now, we can broadly divide variables into two main types,</p>\r\n<ul class=\"content\">\r\n<li>Global Variables</li>\r\n<li>Local variables</li>\r\n</ul>\r\n', '<h3>Global variables</h3>\r\n<p>Global variables are those, which ar once declared and can be used throughout the lifetime of the program by any class or any function. They must be declared outside the <code>main()</code> function. If only declared, they can be assigned different values at different time in program lifetime. But even if they are declared and initialized at the same time outside the main() function, then also they can be assigned any value at any point in the program.</p>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">#include <span class=\"token operator\">&lt;</span>iostream<span class=\"token operator\">&gt;</span>\r\nusing namespace std<span class=\"token punctuation\">;</span>\r\nint x<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// Global variable declared</span>\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    x<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// Initialized once</span>\r\n    cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token string\">\"first value of x = \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">;</span>\r\n    x<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// Initialized again</span>\r\n    cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token string\">\"Initialized again with value = \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre><HR>\r\n<HR>\r\n<h3>Local Variables</h3>\r\n<p>Local variables are the variables which exist only between the curly braces, in which its declared. Outside that they are unavailable and leads to compile time error.</p>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">#include <span class=\"token operator\">&lt;</span>iostream<span class=\"token operator\">&gt;</span>\r\nusing namespace std<span class=\"token punctuation\">;</span>\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int i<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// if condition scope starts</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        int n<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Local variable declared and initialized</span>\r\n    <span class=\"token punctuation\">}</span>              <span class=\"token comment\">// if condition scope ends</span>\r\n    cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Compile time error, n not available here</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', '<h3>Some special types of variable</h3>\r\n<p>There are also some special keywords, to impart unique characteristics to the variables in the program. Following two are mostly used, we will discuss them in details later.</p>\r\n<ol class=\"content\">\r\n<li><b>Final</b> - Once initialized, its value cant be changed.</li>\r\n<li><b>Static</b> - These variables holds their value between function calls.</li>\r\n</ol>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'final static GlobalVariables Localvariables\r\n', NULL, NULL, NULL),
(12, 'Operators in C++', '<p>\r\nOperators are special type of functions, that takes one or more arguments and produces a new value. For example : addition (+), substraction (-), multiplication (*) etc, are all operators. Operators are used to perform various operations on variables and constants.\r\n</p>\r\n<HR>\r\n', '<h2>Types of operators</h2>\r\n<ol class=\"content\">\r\n<li>Assignment Operator</li>\r\n<li>Mathematical Operators</li>\r\n<li>Relational Operators</li>\r\n<li>Logical Operators</li>\r\n<li>Bitwise Operators</li>\r\n<li>Shift Operators</li>\r\n<li>Unary Operators</li>\r\n<li>Ternary Operator</li>\r\n<li>Comma Operator</li>\r\n</ol>', '<h3>Assignment Operator (<code>=</code>)</h3><p>Operates \'=\' is used for assignment, it takes the right-hand side (called rvalue) and copy it into the left-hand side (called lvalue).\r\nAssignment operator is the only operator which can be overloaded but cannot be inherited.\r\n</p>\r\n<table class=\"table table-bordered\">\r\n<tbody><tr>\r\n<th width=\"10%\" style=\"text-align:center;\">Operator</th>\r\n<th width=\"48%\" style=\"text-align:center;\">Description</th>\r\n<th style=\"text-align:center;\">Example</th>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">=</td>\r\n<td>Simple assignment operator, Assigns values from right side operands to left side operand.</td>\r\n<td style=\"vertical-align:middle;\">C = A + B will assign value of A + B into C</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">+=</td>\r\n<td>Add AND assignment operator, It adds right operand to the left operand and assign the result to left operand.</td>\r\n<td style=\"vertical-align:middle;\">C += A is equivalent to C = C + A</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">-=</td>\r\n<td>Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.</td>\r\n<td style=\"vertical-align:middle;\">C -= A is equivalent to C = C - A</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">*=</td>\r\n<td>Multiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.</td>\r\n<td style=\"vertical-align:middle;\">C *= A is equivalent to C = C * A</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">/=</td>\r\n<td>Divide AND assignment operator, It divides left operand with the right operand and assign the result to left operand.</td>\r\n<td style=\"vertical-align:middle;\">C /= A is equivalent to C = C / A</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">%=</td>\r\n<td>Modulus AND assignment operator, It takes modulus using two operands and assign the result to  left operand.</td>\r\n<td style=\"vertical-align:middle;\">C %= A is equivalent to C = C % A</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">&lt;&lt;=</td>\r\n<td>Left shift AND assignment operator.</td>\r\n<td style=\"vertical-align:middle;\">C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">&gt;&gt;=</td>\r\n<td>Right shift AND assignment operator.</td>\r\n<td style=\"vertical-align:middle;\">C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">&amp;=</td>\r\n<td>Bitwise AND assignment operator.</td>\r\n<td style=\"vertical-align:middle;\">C &amp;= 2 is same as C = C &amp; 2</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">^=</td>\r\n<td>Bitwise exclusive OR and assignment operator.</td>\r\n<td style=\"vertical-align:middle;\">C ^= 2 is same as C = C ^ 2</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">|=</td>\r\n<td>Bitwise inclusive OR and assignment operator.</td>\r\n<td style=\"vertical-align:middle;\">C |= 2 is same as C = C | 2</td>\r\n</tr>\r\n</tbody></table>\r\n<HR>\r\n\r\n<h3>Mathematical Operators</h3>\r\n<p>There are operators used to perform basic mathematical operations. Addition (+) , subtraction (-) , diversion (/) multiplication (*) and modulus (%) are the basic mathematical operators.\r\nModulus operator cannot be used with floating-point numbers.</p><table class=\"table table-bordered\">\r\n<tbody><tr>\r\n<th width=\"10%\" style=\"text-align:center;\">Operator</th>\r\n<th width=\"45%\" style=\"text-align:center;\">Description</th>\r\n<th style=\"text-align:center;\">Example</th>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center;\">+</td>\r\n<td>Adds two operands</td>\r\n<td style=\"text-align:center;\">A + B will give 30</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">-</td>\r\n<td>Subtracts second operand from the first</td>\r\n<td class=\"ts\">A - B will give -10</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center;\">*</td>\r\n<td>Multiplies both operands</td>\r\n<td style=\"text-align:center;\">A * B will give 200</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align:center;\">/</td>\r\n<td>Divides numerator by de-numerator</td>\r\n<td style=\"text-align:center;\">B / A will give 2</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">%</td>\r\n<td>Modulus Operator and remainder of after an integer division</td>\r\n<td class=\"ts\">B % A will give 0</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">++</td>\r\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Increment operator in C++\">Increment operator</a>, increases integer value by one</td>\r\n<td class=\"ts\">A++ will give 11</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">--</td>\r\n<td><a href=\"/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Decrement operator in C++\">Decrement operator</a>, decreases integer value by one</td>\r\n<td class=\"ts\">A-- will give 9</td>\r\n</tr>\r\n</tbody></table>\r\n<HR>\r\n\r\n<h3>Relational Operators</h3><p>These operators establish a relationship between operands. The relational operators are : less than (&lt;) , grater thatn (&gt;) , less than or equal to (&lt;=), greater than equal to (&gt;=), equivalent (==) and not equivalent (!=).\r\n</p><p>You must notice that assignment operator is (=) and there is a relational operator, for equivalent (==). These two are different from each other, the assignment operator assigns the value to any variable, whereas equivalent operator is used to compare values, like in if-else conditions, </p><table class=\"table table-bordered\">\r\n<tbody><tr>\r\n<th width=\"10%\" style=\"text-align:center;\">Operator</th>\r\n<th width=\"45%\" style=\"text-align:center;\">Description</th>\r\n<th style=\"text-align:center;\">Example</th>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">==</td>\r\n<td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>\r\n<td class=\"ts\">(A == B) is not true.</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">!=</td>\r\n<td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>\r\n<td class=\"ts\">(A != B) is true.</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">&gt;</td>\r\n<td>Checks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.</td>\r\n<td class=\"ts\">(A &gt; B) is not true.</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">&lt;</td>\r\n<td>Checks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.</td>\r\n<td class=\"ts\">(A &lt; B) is true.</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">&gt;=</td>\r\n<td>Checks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\r\n<td class=\"ts\">(A &gt;= B) is not true.</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">&lt;=</td>\r\n<td>Checks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>\r\n<td class=\"ts\">(A &lt;= B) is true.</td>\r\n</tr>\r\n</tbody></table><hr>\r\n\r\n<h3>Logical Operators</h3>\r\n<p>The logical operators are AND (&amp;&amp;) and OR (||). They are used to combine two different expressions together.</p><p>If two statement are connected using AND operator, the validity of both statements will be considered, but if they are connected using OR operator, then either one of them must be valid. These operators are mostly used in loops (especially <code>while</code> loop) and in Decision making.</p><table class=\"table table-bordered\">\r\n<tbody><tr>\r\n<th width=\"10%\" style=\"text-align:center;\">Operator</th>\r\n<th width=\"45%\" style=\"text-align:center;\">Description</th>\r\n<th style=\"text-align:center;\">Example</th>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">&amp;&amp;</td>\r\n<td>Called Logical AND  operator. If both the operands are non-zero, then condition becomes true.</td>\r\n<td class=\"ts\">(A &amp;&amp; B) is false.</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">||</td>\r\n<td>Called Logical OR Operator. If any of the two operands is non-zero, then condition becomes true.</td>\r\n<td class=\"ts\">(A || B) is true.</td>\r\n</tr>\r\n<tr>\r\n<td class=\"ts\">!</td>\r\n<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.</td>\r\n<td class=\"ts\">!(A &amp;&amp; B) is true.</td>\r\n</tr>\r\n</tbody></table><hr>\r\n<h3>Bitwise Operators</h3>\r\n<p>There are used to change individual bits into a number. They work with only integral data types like <code>char</code>, <code>int</code> and <code>long</code> and not with floating point values.</p><ul class=\"content\">\r\n<li>Bitwise AND operators <code>&amp;</code> </li>\r\n<li>Bitwise OR operator <code>|</code> </li>\r\n<li>And bitwise XOR operator <code>^</code></li>\r\n<li>And, bitwise NOT operator <code>~</code></li>\r\n</ul><p>They can be used as shorthand notation too, <code>&amp; =</code> , <code>|=</code> , <code>^=</code> , <code>~=</code> etc.</p>\r\n<HR>\r\n<h3>Shift Operators</h3>\r\n<p>Shift Operators are used to shift Bits of any variable. It is of three types,</p>\r\n<ol class=\"content\">\r\n<li>Left Shift Operator <code> &lt;&lt; </code></li>\r\n<li>Right Shift Operator <code> &gt;&gt; </code></li>\r\n<li>Unsigned Right Shift Operator <code> &gt;&gt;&gt; </code></li>\r\n</ol><HR>\r\n\r\n<h3>Unary Operators</h3><p>These are the operators which work on only one operand. There are many unary operators, but increment <code>++</code> and decrement <code>--</code> operators are most used. </p>\r\n<p><b>Other Unary Operators :</b> address of <code>&amp;</code>, dereference <code>*</code>, <b>new</b> and <b>delete</b>, bitwise not <code>~</code>, logical not <code>!</code>, unary minus <code>-</code> and unary plus <code>+</code>.</p><HR><h3>Ternary Operator</h3><p>The ternary if-else <code>? :</code> is an operator which has three operands.\r\n</p><HR><h3>Comma Operator</h3><p>This is used to separate variable names and to separate expressions. In case of expressions, the value of last expression is produced and used.</p>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'AssignmentOperator\r\nMathematicalOperators\r\nRelationalOperators\r\nLogicalOperators\r\nBitwiseOperators\r\nShiftOperators\r\nUnaryOperators\r\nTernaryOperator\r\nCommaOperator\r\n', NULL, NULL, NULL),
(13, 'Operators Precedence in C++', '<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator âˆ’</p>\r\n<p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>', '<table class=\"table table-bordered\" style=\"text-align:center;\">\r\n<tbody><tr>\r\n<th style=\"text-align:center;\">Category&nbsp;</th>\r\n<th style=\"text-align:center;\">Operator&nbsp;</th>\r\n<th style=\"text-align:center;\">Associativity&nbsp;</th>\r\n</tr> \r\n<tr>\r\n<td>Postfix&nbsp;</td>\r\n<td>() [] -&gt; .  ++   - - &nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td>Unary&nbsp;</td>\r\n<td>+  -   !  ~  ++  - - (type)*  &amp; sizeof&nbsp;</td>\r\n<td>Right to left&nbsp;</td>\r\n</tr> \r\n<tr>\r\n<td>Multiplicative &nbsp;</td>\r\n<td>*  /  %&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr> \r\n<tr>\r\n<td>Additive &nbsp;</td>\r\n<td>+  -&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td>Shift &nbsp;</td>\r\n<td>&lt;&lt; &gt;&gt;&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr> \r\n<tr>\r\n<td>Relational &nbsp;</td>\r\n<td>&lt; &lt;=  &gt; &gt;=&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td>Equality &nbsp;</td>\r\n<td>==  !=&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr> \r\n<tr>\r\n<td>Bitwise AND&nbsp;</td>\r\n<td>&amp;&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr> \r\n<tr>\r\n<td>Bitwise XOR&nbsp;</td>\r\n<td>^&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr> \r\n<tr>\r\n<td>Bitwise OR&nbsp;</td>\r\n<td>|&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr> \r\n<tr>\r\n<td>Logical AND&nbsp;</td>\r\n<td>&amp;&amp;&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td>Logical OR&nbsp;</td>\r\n<td>||&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr> \r\n<tr>\r\n<td>Conditional&nbsp;</td>\r\n<td>?:&nbsp;</td>\r\n<td>Right to left&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td>Assignment&nbsp;</td>\r\n<td>=  +=  -=  *=  /=  %=&gt;&gt;=  &lt;&lt;=  &amp;=  ^=   |=&nbsp;</td>\r\n<td>Right to left&nbsp;</td>\r\n</tr>\r\n<tr>\r\n<td>Comma&nbsp;</td>\r\n<td>,&nbsp;</td>\r\n<td>Left to right&nbsp;</td>\r\n</tr> \r\n</tbody></table>', NULL, NULL, NULL, '<p>For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.</p>', NULL, NULL, NULL, NULL, 'Operators Precedence', NULL, NULL, NULL),
(14, 'Sizeof Operators in C++', '<p><code>sizeof</code> is also an operator not a function, it is used to get information about the amount of memory allocated for data types &amp; Objects. It can be used to get size of user defined data types too.\r\n</p>', '<p><code>sizeof</code> operator can be used with and without parentheses. If you apply it to a variable you can use it without parentheses.</p>', NULL, NULL, NULL, '<pre class=\"cpp language-clike\"><code class=\" language-clike\">cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//Will print size of double</span>\r\nint x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\r\nint i <span class=\"token operator\">=</span> sizeof x<span class=\"token punctuation\">;</span>\r\n</code></pre>', NULL, NULL, NULL, NULL, 'sizeof', NULL, NULL, NULL),
(15, 'Typedef Operator in C++', '<p>\r\n<code>typedef</code> is a keyword used in C language to assign alternative names to existing types. Its mostly used with user defined data types, when names of data types get slightly complicated. Following is the general syntax for using typedef,</p>', '<pre class=\"cpp language-clike\"><code class=\" language-clike\">typedef existing_name alias_name</code></pre><HR>\r\n<p>Lets take an example and see how typedef actually works.</p><pre class=\"cpp language-clike\"><code class=\" language-clike\">typedef unsigned long ulong<span class=\"token punctuation\">;</span></code></pre><HR>\r\n<p>The above statement define a term <b>ulong</b> for an unsigned long type. Now this <b>ulong</b> identifier can be used to define unsigned long type variables.</p>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">ulong i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></code></pre>\r\n<HR>\r\n', '<h2><code>typedef</code> and Pointers</h2>\r\n<p><code>typedef</code> can be used to give an alias name to pointers also. Here we have a case in which use of typedef is beneficial during pointer declaration.</p>\r\n', '<p>In Pointers <code>*</code> binds to the right and not the left.</p><pre class=\"cpp language-clike\"><code class=\" language-clike\">int<span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">;</span></code></pre>\r\n<HR><p>By this declaration statement, we are actually declaring <b>x</b> as a pointer of type int, whereas <b>y</b> will be declared as a plain integer.</p>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">typedef int<span class=\"token operator\">*</span> IntPtr <span class=\"token punctuation\">;</span>\r\nIntPtr x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span></code></pre>', '<p>But if we use <b>typedef</b> like in above example, we can declare any number of pointers in a single statement.</p>', NULL, NULL, NULL, NULL, NULL, 'typedef', NULL, NULL, NULL),
(16, 'Storage Classes in C++\r\n', '<p>Storage classes are used to specify the lifetime and scope of variables. How storage is allocated for variables and How variable is treated by complier depends on these storage classes.\r\n</p>', '<p>These are basically divided into 5 different types:</p>\r\n<ol class=\"content\">\r\n<li>Global variables</li>\r\n<li>Local variables</li>\r\n<li>Register variables</li>\r\n<li>Static variables</li>\r\n<li>Extern variables</li>\r\n</ol>', '<h2>Global Variables</h2>\r\n<p>These are defined at the starting , before all function bodies and are available throughout the program.</p>\r\n<MARK><pre class=\"cpp language-clike\"><code class=\" language-clike\">using namespace std<span class=\"token punctuation\">;</span>\r\nint globe<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Global variable</span>\r\nvoid <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></MARK><HR>\r\n\r\n<h2>Local variables</h2>\r\n<p>They are defined and are available within a particular scope. They are also called <b>Automatic variable</b> because they come into being when scope is entered and automatically go away when the scope ends.</p><p>The keyword <b>auto</b> is used, but by default all local variables are auto, so we don\'t have to explicitly add keyword auto before variable dedaration. Default value of such variable is <b>garbage</b>.\r\n</p><HR>\r\n<h2>Register variables</h2>\r\n<p>This is also a type of local variable. This keyword is used to tell the compiler to make access to this variable as fast as possible. Variables are stored in registers to increase the access speed. </p>\r\n<p>But you can never use or compute <b>address of register variable</b> and also , a register variable can be declared only within a <b>block</b>, that means, you cannot have <i>global</i> or <i>static register variables</i>. </p>\r\n<HR>\r\n<h2>Static Variables</h2>\r\n<p>Static variables are the variables which are initialized &amp; allocated storage only once at the beginning of program execution, no matter how many times they are used and called in the program. A static variable retains its value until the end of program.\r\n</p><MARK><pre class=\"cpp language-clike\"><code class=\" language-clike\">void <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    static int i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n    cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Output = 11</span>\r\n    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Output = 12</span>\r\n    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Output = 13</span>\r\n<span class=\"token punctuation\">}</span></code></pre></MARK><p>As, <code>i</code> is static, hence it will retain its value through function calls, and is initialized only once at the beginning.</p>\r\n<HR><h2>Extern Variables</h2><p>This keyword is used to access variable in a file which is declared &amp; defined in some other file, that is the existence of a global variable in one file is declared using extern keyword in another file. </p>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Extern Static Register variables Global variables\r\nLocal variables\r\nRegister variables', NULL, NULL, NULL);
INSERT INTO `cpp_lang` (`id`, `indextopic`, `content`, `syntax`, `syntaxdef`, `syntax2`, `syntaxdef2`, `example`, `exampledef`, `example2`, `exampledef2`, `searchword`, `keyword`, `diagram1`, `diagram2`, `diagram3`) VALUES
(17, 'Functions in C++', '<p>Functions are used to provide modularity to a program. Creating an application using function makes it easier to understand, edit, check errors etc.\r\n</p>\r\n<p>\r\n</p><HR>\r\n<h2>Basic Syntax for using Functions in C++</h2>\r\n<p>Here is how you define a function in C++,</p>\r\n', '<pre class=\"cpp language-clike\"><code class=\" language-clike\"><span class=\"token keyword\">return</span><span class=\"token operator\">-</span>type <span class=\"token keyword\">function</span><span class=\"token operator\">-</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>parameter1<span class=\"token punctuation\">,</span> parameter2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// function-body</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', '<li><b>return-type: </b>suggests what the function will return. It can be int, char, some pointer or even a class object. There can be functions which does not return anything, they are mentioned with <b>void</b>.</li><li><b>Function Name:</b> is the name of the function, using the function name it is called.<br>\r\n<b>Parameters: </b>are variables to hold values of arguments passed while function is called. A function may or may not contain parameter list.</li>\r\n', NULL, NULL, '<pre class=\"cpp language-clike\"><code class=\" language-clike\"><span class=\"token comment\">// function for adding two values</span>\r\nvoid <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> int y<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int z<span class=\"token punctuation\">;</span>\r\n    z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\r\n    cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> z<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    int b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// calling the function with name \'sum\'</span>\r\n    <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', 'Here, a and b are two variables which are sent as arguments to the function sum, and x and y are parameters which will hold values of a and b to perform the required operation inside the function.<BR>', NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(18, 'Calling a Function', '<p>Functions are called by their names. If the function is without argument, it can be called directly using its name. But for functions with arguments, we have two ways to call them,</p>\r\n<ol class=\"content\">\r\n<li>Call by Value</li>\r\n<li>Call by Reference</li>\r\n</ol>', '<h3>Call by Value</h3>\r\n<p>In this calling technique we pass the values of arguments which are stored or copied into the formal parameters of functions. Hence, the original values are unchanged only the parameters inside function changes. </p>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">void <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nvoid <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre><p class=\"output\">\r\n10\r\n</p>', '<p>In this case the actual variable <code>x</code> is not changed, because we pass argument by value, hence a copy of x is passed, which is changed, and that copied value is destroyed as the function ends(goes out of scope). So the variable <b>x</b> inside main() still has a value 10.</p><p>But we can change this program to modify the original <b>x</b>, by making the function <b>calc()</b> return a value, and storing that value in x.</p>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">int <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    x <span class=\"token operator\">=</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nint <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre><p class=\"output\">\r\n20\r\n</p>', '<h3>Call by Reference</h3>\r\n<p>In this we pass the address of the variable as arguments. In this case the formal parameter can be taken as a reference or a pointer, in both the case they will change the values of the original variable. </p><pre class=\"cpp language-clike\"><code class=\" language-clike\">void <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// passing address of x as argument</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nvoid <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre>\r\n<p class=\"output\">\r\n20\r\n</p>', '<p><b>NOTE:</b> If you do not have a prior knowledge of pointers, do study pointers first.</p>', NULL, NULL, NULL, NULL, NULL, 'callbyvalue callbyreference', NULL, NULL, NULL),
(19, 'Introduction to C++ Classes and Objects\r\n', '<p>The classes are the most important feature of C++ that leads to Object Oriented programming. Class is a user defined data type, which holds its own data members and member functions, which can be accessed and used by creating instance of that class.\r\n</p>\r\n<p>The variables inside class definition are called as data members and the functions are called member functions.\r\n</p>\r\n<p><b>For example:</b> Class of birds, all birds can fly and they all have wings and beaks. So here flying is a behavior and wings and beaks are part of their characteristics. And there are many different birds in this class with different names but they all posses this behavior and characteristics.</p>\r\n<p>Similarly, class is just a blue print, which declares and defines characteristics and behavior, namely data members and member functions respectively. And all objects of this class will share these characteristics and behavior.\r\n</p>\r\n<HR>\r\n<HR>\r\n\r\n<h2>More about Classes</h2>\r\n<ol class=\"content\">\r\n<li>Class name must start with an uppercase letter(Although this is not mandatory). If class name is made of more than one word, then first letter of each word must be in uppercase. <i>Example</i>,\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Study</span><span class=\"token punctuation\">,</span> class <span class=\"token class-name\">StudyTonight</span> etc</code></pre>\r\n</li>\r\n<li>Classes contain, data members and member functions, and the access of these data members and variable depends on the access specifiers (discussed in next section).\r\n</li>\r\n<li>Class\'s member functions can be defined inside the class definition or outside the class definition.\r\n</li>\r\n<li>Class in C++ are similar to structures in C, the only difference being, class defaults to private access control, where as structure defaults to public.\r\n</li>\r\n<li>All the features of OOPS, revolve around classes in C++. Inheritance, Encapsulation, Abstraction etc.\r\n</li>\r\n<li>Objects of class holds separate copies of data members. We can create as many objects of a class as we need.\r\n</li>\r\n<li>Classes do posses more characteristics, like we can create abstract classes, immutable classes, all this we will study later. </li>\r\n</ol>', '\r\n', '<HR><HR>\r\n<h2>Objects of Classes</h2>\r\n<p>Class is mere a blueprint or a template. No storage is assigned when we define a class. Objects are instances of class, which holds the data variables declared in class and the member functions work on these class objects. </p>\r\n<p>Each object has different data variables. Objects are initialised using special class functions called <b>Constructors</b>. We will study about constructors later.</p>\r\n<p>And whenever the object is out of its scope, another special class member function called <b>Destructor</b> is called, to release the memory reserved by the object. C++ doesn\'t have Automatic Garbage Collector like in JAVA, in C++ Destructor performs this task.</p>', NULL, NULL, '<pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Abc</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int x<span class=\"token punctuation\">;</span>\r\n    void <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// some statement</span>\r\n    <span class=\"token punctuation\">}</span> \r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Abc obj<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Object of class Abc created</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(20, 'Access Control in C++', '<p>Now before studying how to define class and its objects, lets first quickly learn what are access modifiers.\r\n</p><p>Now before studying how to define class and its objects, lets first quickly learn what are access modifiers.\r\n</p><ol class=\"content\">\r\n<li>public</li>\r\n<li>private</li>\r\n<li>protected</li>\r\n</ol><p>These access modifiers are used to set boundaries for availability of members of class be it data members or member functions</p><p>Access modifiers in the program, are followed by a colon. You can use either one, two or all 3 modifiers in the same class to set different boundaries for different class members. They change the boundary for all the declarations that follow them.\r\n</p>', '<h2>Public Access Modifier in C++</h2><p>Public, means all the class members declared under <b>public</b> will be available to everyone. The data members and member functions declared public can be accessed by other classes too. Hence there are chances that they might change them. So the key members must not be declared public.\r\n<strong></p><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">PublicAccess</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// public access modifier</span>\r\n    public<span class=\"token punctuation\">:</span>   \r\n    int x<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Data Member Declaration </span>\r\n    void <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Member Function decaration</span>\r\n<span class=\"token punctuation\">}</span></code></pre></strong>\r\n<HR><HR>\r\n<h2>Private Access Modifier in C++</h2>\r\n<p>Private keyword, means that no one can access the class members declared <b>private</b>, outside that class. If someone tries to access the private members of a class, they will get a <b>compile time error</b>. By default class variables and member functions are private.\r\n<strong></p><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">PrivateAccess</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// private access modifier</span>\r\n    private<span class=\"token punctuation\">:</span>   \r\n    int x<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Data Member Declaration </span>\r\n    void <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Member Function decaration</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></strong>\r\n<HR><HR>\r\n<h2>Protected Access Modifier in C++\r\n<p>Protected, is the last access specifier, and it is similar to private, it makes class member inaccessible outside the class. But they can be accessed by any subclass of that class. (If class A is <b>inherited</b> by class B, then class B is subclass of class A. We will learn about inheritance later.)\r\n</p>\r\n<strong><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">ProtectedAccess</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// protected access modifier</span>\r\n    protected<span class=\"token punctuation\">:</span> \r\n    int x<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Data Member Declaration </span>\r\n    void <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Member Function decaration</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre>\r\n</h2></strong>\r\n<HR>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(21, 'Defining Class and Creating Objects', '<p>When we define any class, we are not defining any data, we just define a structure or a blueprint, as to what the object of that class type will contain and what operations can be performed on that object.\r\n', '</p><p>Below is the syntax of class definition,\r\n</p>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">ClassName</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Access specifier<span class=\"token punctuation\">:</span> \r\n    Data members<span class=\"token punctuation\">;</span>\r\n    Member <span class=\"token function\">Functions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// member function defintion</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n</code></pre>', NULL, NULL, NULL, '<p>Here is an example, we have made a simple class named Student with appropriate members,</p><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Student</span>\r\n<span class=\"token punctuation\">{</span>\r\n    public<span class=\"token punctuation\">:</span>\r\n    int rollno<span class=\"token punctuation\">;</span>\r\n    string name<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>', '<p>So its clear from the syntax and example, class definition starts with the keyword \"class\" followed by the class name. Then inside the curly braces comes the class body, that is data members and member functions, whose access is bounded by access specifier. A class definition ends with a semicolon, or with a list of object declarations.\r\n</p>', '<pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Student</span>\r\n<span class=\"token punctuation\">{</span>\r\n    public<span class=\"token punctuation\">:</span>\r\n    int rollno<span class=\"token punctuation\">;</span>\r\n    string name<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">;</span></code></pre>', '<pre class=\"cpp language-clike\"><code class=\" language-clike\">int <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// creating object of class Student</span>\r\n    Student A<span class=\"token punctuation\">;</span>\r\n    Student B<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', NULL, NULL, NULL, NULL, NULL),
(22, 'Accessing Data Members of Class in C++', '<p>Accessing a data member depends solely on the access control of that data member. If its public, then the data member can be easily accessed using the direct member access <code>(.)</code> operator with the object of that class.\r\n</p><p>If, the data member is defined as private or protected, then we cannot access the data variables directly. Then we will have to create special public member functions to access, use or initialize the private and protected data members. These member functions are also called <b>Accessors</b> and <b>Mutator</b> methods or <b>getter</b> and <b>setter</b> functions.\r\n</p>', '<h2>Accessing Public Data Members</h2><p>Following is an example to show you how to initialize and use the public data members using the dot (.) operator and the respective object of class.\r\n</p><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Student</span>\r\n<span class=\"token punctuation\">{</span>\r\n    public<span class=\"token punctuation\">:</span>\r\n    int rollno<span class=\"token punctuation\">;</span>\r\n    string name<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Student A<span class=\"token punctuation\">;</span>\r\n    Student B<span class=\"token punctuation\">;</span>\r\n    \r\n    <span class=\"token comment\">// setting values for A object</span>\r\n    A<span class=\"token punctuation\">.</span>rollno<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    A<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Adam\"</span><span class=\"token punctuation\">;</span>\r\n    \r\n    <span class=\"token comment\">// setting values for B object</span>\r\n    B<span class=\"token punctuation\">.</span>rollno<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\r\n    B<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"Bella\"</span><span class=\"token punctuation\">;</span>\r\n\r\n    cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token string\">\"Name and Roll no of A is: \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">.</span>rollno<span class=\"token punctuation\">;</span>\r\n    cout <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token string\">\"Name and Roll no of B is: \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> B<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> B<span class=\"token punctuation\">.</span>rollno<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre><p class=\"output\">\r\nName and Roll no of A is: Adam-1\r\nName and Roll no of B is: Bella-2\r\n</p>', '<h3>Accessing Protected Data Members</h3><p>Protected data members, can be accessed directly using dot (.) operator inside the <b>subclass</b> of the current class, for non-subclass we will have to follow the steps same as to access private data member.\r\n</p>', '<h2>Accessing Private Data Members</h2><p>To access, use and initialize the private data member you need to create getter and setter functions, to get and set the value of the data member.\r\n</p><p>The setter function will set the value passed as argument to the private data member, and the getter function will return the value of the private data member to be used. Both getter and setter function must be defined public.\r\n</p><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Student</span>\r\n<span class=\"token punctuation\">{</span>\r\n    private<span class=\"token punctuation\">:</span>    <span class=\"token comment\">// private data member</span>\r\n    int rollno<span class=\"token punctuation\">;</span>\r\n\r\n    public<span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\">// public function to get value of rollno - getter</span>\r\n    int <span class=\"token function\">getRollno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> rollno<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">// public function to set value for rollno - setter</span>\r\n    void <span class=\"token function\">setRollno</span><span class=\"token punctuation\">(</span>int i<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        rollno<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Student A<span class=\"token punctuation\">;</span>\r\n    A<span class=\"token punctuation\">.</span>rollono<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Compile time error</span>\r\n    cout<span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">.</span>rollno<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Compile time error</span>\r\n\r\n    A<span class=\"token punctuation\">.</span><span class=\"token function\">setRollno</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Rollno initialized to 1</span>\r\n    cout<span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">getRollno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Output will be 1</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', '<p>So this is how we access and use the private data members of any class using the getter and setter methods. We will discuss this in more details later.\r\n</p>', NULL, NULL, NULL, NULL, NULL, 'datamember', NULL, NULL, NULL),
(23, 'Member Functions of Classes in C++', '<p>Member functions are the functions, which have their declaration inside the class definition and works on the data members of the class. The definition of member functions can be inside or outside the definition of class.\r\n</p><p>If the member function is defined inside the class definition it can be defined directly, but if its defined outside the class, then we have to use the scope resolution <code>::</code> operator along with class name alng with function name.</p>\r\n', '<HR><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Cube</span>\r\n<span class=\"token punctuation\">{</span>\r\n    public<span class=\"token punctuation\">:</span>\r\n    int side<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">/*\r\n        Declaring function getVolume \r\n        with no argument and return type int.\r\n    */</span>\r\n    int <span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n</code></pre>\r\n<HR><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Cube</span>\r\n<span class=\"token punctuation\">{</span>\r\n    public<span class=\"token punctuation\">:</span>\r\n    int side<span class=\"token punctuation\">;</span>\r\n    int <span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> side<span class=\"token operator\">*</span>side<span class=\"token operator\">*</span>side<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//returns volume of cube</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>', '<p>But if we plan to define the member function outside the class definition then we must declare the function inside class definition and then define it outside.\r\n</p>', '<hr>\r\n<hr>\r\n<h2>Calling Class Member Function in C++</h2><p>Similar to accessing a data member in the class, we can also access the public member functions through the class object using the dot operator <code>(.)</code>.</p><p>Below we have a simple code example, where we are creating an object of the class <code>Cube</code> and calling the member function <code>getVolume()</code>:</p><pre class=\"cpp language-clike\"><code class=\" language-clike\">int <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    Cube C1<span class=\"token punctuation\">;</span>\r\n    C1<span class=\"token punctuation\">.</span>side <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// setting side value</span>\r\n    cout<span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"Volume of cube C1 = \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> C1<span class=\"token punctuation\">.</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre><p class=\"output\">\r\nVolume of cube C1 = 16\r\n</p>', '<p>Similarly we can define the getter and setter functions to access private data members, inside or outside the class definition.\r\n</p><hr><hr>', '<pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Cube</span>\r\n<span class=\"token punctuation\">{</span>\r\n    public<span class=\"token punctuation\">:</span>\r\n    int side<span class=\"token punctuation\">;</span>\r\n    int <span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// member function defined outside class definition</span>\r\nint Cube <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> <span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> side<span class=\"token operator\">*</span>side<span class=\"token operator\">*</span>side<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', '<p>The main function for both the function definition will be same. Inside main() we will create object of class, and will call the member function using dot <code>.</code> operator.\r\n</p>', NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(24, 'Types of Class Member Functions in C++', '<p>We already know what member functions are, what they do, how to define member function and how to call them using class objects. Now lets learn about some special member functions which can be defined in C++ classes. Following are the different types of Member functions:\r\n</p>', '<ol class=\"content\">\r\n<li>Simple functions</li>\r\n<li>Static functions</li>\r\n<li>Const functions</li>\r\n<li>Inline functions</li>\r\n<li>Friend functions</li>\r\n</ol>', '<h2>Simple Member functions in C++</h2><p>These are the basic member function, which dont have any special keyword like static etc as prefix. All the general member functions, which are of below given form, are termed as simple and basic member functions.\r\n</p><hr><hr>\r\n\r\n<h2>Static Member functions in C++</h2><p>Static is something that holds its position. Static is a keyword which can be used with data members as well as the member functions. We will discuss this in details later. As of now we will discuss its usage with member functions only.\r\n</p>\r\n<p>A function is made static by using <code>static</code> keyword with function name. These functions work for the class as whole rather than for a particular object of a class.\r\n</p><p>It can be called using the object and the direct member access <code>.</code> operator. But, its more typical to call a static member function by itself, using class name and scope resolution <code>::</code> operator.\r\n</p><p>\r\nThese functions cannot access ordinary data members and member functions, but only <code>static</code> data members and <code>static</code> member functions can be called inside them.\r\n</p>\r\n<hr><hr>\r\n\r\n<h2>Const Member functions in C++</h2><p>We will study <b>Const</b> keyword in detail later(<a href=\"/cpp/const-keyword.php\" target=\"_blank\">Const Keyword</a>), but as an introduction, Const keyword makes variables constant, that means once defined, there values can\'t be changed.\r\n</p><p>When used with member function, such member functions can never modify the object or its related data members.\r\n</p><hr><hr>\r\n<h2>Inline functions in C++</h2><p>All the member functions defined inside the class definition are by default declared as Inline. We will study Inline Functions in details in the next topic.</p>\r\n\r\n<hr><hr>\r\n\r\n<h2>Friend functions in C++</h2>\r\n<p>Friend functions are actually not class member function. Friend functions are made to give <b>private</b> access to non-class functions. You can declare a global function as friend, or a member function of other class as friend.\r\n</p><p>Hence, friend functions can access private data members by creating object of the class. Similarly we can also make function of some other class as friend, or we can also make an entire class as <b>friend class</b>.</p>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Simple functions\r\nStatic functions\r\nConst functions\r\nInline functions\r\nFriend functions', NULL, NULL, NULL),
(25, 'Inheritance in C++', '<p>Inheritance is the capability of one class to acquire properties and characteristics from another class. The class whose properties are inherited by other class is called the <b>Parent</b> or <b>Base</b> or <b>Super</b> class. And, the class which inherits properties of other class is called <b>Child</b> or <b>Derived</b> or <b>Sub</b> class.</p>\r\n<p>Inheritance makes the code reusable. When we inherit an existing class, all its methods and fields become available in the new class, hence code is reused.</p>\r\n<p><b>NOTE: </b> All members of a class except Private, are inherited</p>', '<h2>Purpose of Inheritance in C++</h2>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">\r\nclass <span class=\"token class-name\">Subclass_name</span> <span class=\"token punctuation\">:</span> access_mode Superclass_name\r\n</code></pre>', '<p>While defining a subclass like this, the super class must be already defined or atleast declared before the subclass declaration.</p>\r\n<p>Access Mode is used to specify, the mode in which the properties of superclass will be inherited into subclass, public, privtate or protected.</p>', '<h2>Table showing all the Visibility Modes</H2><table class=\"table table-bordered table-striped\">\r\n<thead>\r\n<tr><th></th><th>Derived Class</th><th>Derived Class</th><th>Derived Class</th></tr>\r\n<tr><th>Base class</th><th>Public Mode</th><th>Private Mode</th><th>Protected Mode</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>Private</td>\r\n<td>Not Inherited</td>\r\n<td>Not Inherited</td>\r\n<td>Not Inherited</td>\r\n</tr>\r\n<tr>\r\n<td>Protected</td>\r\n<td>Protected</td>\r\n<td>Private</td>\r\n<td>Protected</td>\r\n</tr>\r\n<tr>\r\n<td>Public</td>\r\n<td>Public</td>\r\n<td>Private</td>\r\n<td>Protected</td>\r\n</tr>\r\n</tbody>\r\n</table><HR>\r\n\r\n<H2>Access Modifiers and Inheritance: Visibility of Class Members</h2>\r\n<p>Depending on Access modifier used while inheritance, the availability of class members of Super class in the sub class changes. It can either be private, protected or public.</p>', '<h3>1) Public Inheritance</h3><p>This is the most used inheritance mode. In this the protected member of super class becomes protected members of sub class and public becomes public.</p>\r\n<U>SYNTAX</U>\r\n<H3><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Subclass</span> <span class=\"token punctuation\">:</span> public Superclass</code></pre></H3>\r\n<HR>\r\n<h3>2) Private Inheritance</h3>\r\n<p>In private mode, the protected and public members of super class become private members of derived class.</p>\r\n<U>SYNTAX</U>\r\n<strong><pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">Subclass</span> <span class=\"token punctuation\">:</span> Superclass   <span class=\"token comment\">// By default its private inheritance</span></code></pre></strong>\r\n<HR>\r\n<h3>3) Protected Inheritance</h3>\r\n<p>In protected mode, the public and protected members of Super class becomes protected members of Sub class.</p>\r\n<U>SYNTAX</U><strong>\r\n<pre class=\"cpp language-clike\"><code class=\" language-clike\">class <span class=\"token class-name\">subclass</span> <span class=\"token punctuation\">:</span> protected Superclass</code></pre>\r\n</strong>\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(26, 'Types of Inheritance in C++', '<p>In C++, we have 5 different types of Inheritance. Namely,</p>\r\n<ol class=\"content\">\r\n<li>Single Inheritance</li>\r\n<li>Multiple Inheritance</li>\r\n<li>Hierarchical Inheritance</li>\r\n<li>Multilevel Inheritance</li>\r\n<li>Hybrid Inheritance (also known as Virtual Inheritance)</li>\r\n</ol>', '<h2>Single Inheritance in C++</h2><p>In this type of inheritance one derived class inherits from only one base class. It is the most simplest form of Inheritance.</p>\r\n<BR><HR>\r\n\r\n<h2>Multiple Inheritance in C++</h2>\r\n<p>In this type of inheritance a single derived class may inherit from two or more than two base classes.</p><BR><HR>\r\n\r\n<h2>Hierarchical Inheritance in C++</h2>\r\n<p>In this type of inheritance, multiple derived classes inherits from a single base class.</p>\r\n\r\n<BR><HR>\r\n\r\n<h2>Multilevel Inheritance in C++</h2>\r\n<p>In this type of inheritance the derived class inherits from a class, which in turn inherits from some other class. The Super class for one, is sub class for the other.</p>\r\n\r\n<BR><HR>\r\n\r\n<h2>Hybrid (Virtual) Inheritance in C++</h2><p>Hybrid Inheritance is combination of Hierarchical and Mutilevel Inheritance.</p>\r\n\r\n<hr><hr>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `cpp_quiz`
--

CREATE TABLE `cpp_quiz` (
  `id` int(2) NOT NULL,
  `name` text NOT NULL,
  `question` text NOT NULL,
  `answer` text NOT NULL,
  `choice1` text DEFAULT NULL,
  `choice2` text DEFAULT NULL,
  `choice3` text DEFAULT NULL,
  `choice4` text DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `c_lang`
--

CREATE TABLE `c_lang` (
  `id` int(2) NOT NULL,
  `indextopic` text NOT NULL,
  `content` text NOT NULL,
  `syntax` text DEFAULT NULL,
  `syntaxdef` text DEFAULT NULL,
  `syntax2` text DEFAULT NULL,
  `syntaxdef2` text DEFAULT NULL,
  `example` text DEFAULT NULL,
  `exampledef` text DEFAULT NULL,
  `example2` text DEFAULT NULL,
  `exampledef2` text DEFAULT NULL,
  `searchword` text DEFAULT NULL,
  `keyword` text DEFAULT NULL,
  `diagram1` text DEFAULT NULL,
  `diagram2` text DEFAULT NULL,
  `diagram3` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `c_lang`
--

INSERT INTO `c_lang` (`id`, `indextopic`, `content`, `syntax`, `syntaxdef`, `syntax2`, `syntaxdef2`, `example`, `exampledef`, `example2`, `exampledef2`, `searchword`, `keyword`, `diagram1`, `diagram2`, `diagram3`) VALUES
(1, 'History of C Language', 'C programming is a<B> general-purpose, procedural, imperative computer programming language</B> developed in 1972 by<b><mark>  Dennis M. Ritchie</mark></b> at the Bell Telephone Laboratories to develop the UNIX operating system. <BR> \r\nC programming language is considered a prerequisite for learning other programming languages as it builds a foundation for beginners to implement advanced concepts.<BR>\r\n\r\nC is the most widely used computer language. It keeps fluctuating at number one scale of popularity along with Java programming language, which is also equally popular and most widely used among modern software programmers<BR>                                  ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'general purpose', 'history', NULL, NULL, NULL),
(2, 'Why To Learn C Programming', 'C programming language is a <B>MUST for students and working professionals to become a great Software Engineer</B> specially when they are working in Software Development Domain.<BR>\r\n I will list down some of the key advantages of learning C Programming:\r\n<b><span style=\\\"color:#D63384\\\"> \r\n\r\n1. Easy to learn<BR>\r\n\r\n2. Structured language<BR>\r\n\r\n3. It produces efficient programs<BR>\r\n\r\n4. It can handle low-level activities<BR>\r\n\r\n5. It can be compiled on a variety of computer platforms<BR>\r\n\r\n </span></b>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'c programming', 'why', NULL, NULL, NULL),
(3, 'Features of C Language', 'C is the widely used language.<br> It provides many features that are given below.<br>\r\n\r\n<b><span style=\\\"color:#D63384\\\"> \r\n1. Simple <br>\r\n2. Machine Independent or Portable<br>\r\n3. Mid-level programming language<br>\r\n4. structured programming language<br>\r\n5. Rich Library<br>\r\n6. Memory Management<br>\r\n7. Fast Speed<br>\r\n8. Pointers<br>\r\n9. Recursion<br>\r\n10. Extensible<br>\r\n  </span></b>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'features', 'features', NULL, NULL, NULL),
(4, 'C structure', 'This is a <B>basic introduction to good coding style</B> in the C Programming Language. It is designed to provide information on how to effectively use indentation, comments, and other elements that will make your C code more readable. <BR>\r\n <BR>\r\n\r\n\r\nAs a beginning programmer, the point of creating structure in the program code might not be clear, as the compiler doesn\'t care about the difference. <BR>\r\n However, as programs become complex, chances are that writing the program has become a joint effort. (Or others might want to see how it was accomplished. Or you may have to read it again years later.) <BR>\r\n Well-written code also helps you get an overview of what the code does <BR>\r\n\r\n\r\n<B>The simple use of indents and line breaks can greatly improve code readability without impacting code performance. Readable code makes it much easier to see where functions and procedures end and which lines are part of which loops and procedures. <BR>\r\n <BR>\r\nThis lesson is going to focus on improving the coding style of an example piece of code which applies a formula and prints the result. Later, you\'ll see how to write code for such tasks in more detail. For now, focus on how the code looks <BR></B>', '', '', NULL, NULL, 'In C, programs are composed of statements. <B>Statements are terminated with a semi-colon, and are collected in sections known as functions.</B> <BR>\r\n By convention, a statement should be kept on its own line, as shown in the example below:\r\n\r\n\r\n#include <stdio.h> <BR>\r\n  \r\n int main(void) {<BR>\r\n 	printf(\"Hello, World!\\n\");<BR>\r\n 	return 0;<BR>\r\n }<BR>\r\n<BR>\r\n<BR>\r\nThe following block of code is essentially the same. While it contains exactly the same code, and will compile and execute with the same result, the removal of spacing causes an essential difference:<BR>\r\n it\'s harder to read.<BR>\r\n<BR>\r\n\r\n #include <stdio.h><BR>\r\n int main(void)<BR> \r\n{<BR>\r\nprintf(\"Hello, World!\\n\");<BR>\r\nreturn 0;<BR>\r\n}<BR>\r\n\r\n\r\n\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(5, 'Command lines', 'Comments in code can be useful for a variety of purposes. They provide the easiest way to set off specific parts of code (and their purpose); as well as providing a visual \"split\" between various parts of your code.\r\n<BR> Having good comments throughout your code will make it much easier to remember what specific parts of your code do.<BR>', '<B>//Single Line Comments</B> <BR> \r\n<BR>\r\n\r\n<B> /*Multi-Line Comments<BR>\r\n(only form of comments supported by C89 standard)*/</B><BR>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'commandlines', NULL, NULL, NULL),
(6, 'C Basic Syntax', '<B>Syntax basically refers to the protocols to be followed while writing a program. It is very necessary to follow proper syntax while coding to get the desired set of output.<BR> </B>\r\nThe  C basic syntax consists of header files, main function, and program code. This is the most fundamental structure in the C program. <BR>\r\nA C program necessarily consists of the main function because the execution of the program starts from this line. Without the main function, the program execution does not start<BR>', '<B> #include<stdio.h><BR>\r\nint main() // main function with integer return type<BR>\r\n{<BR>\r\nprintf(\"Welcome to Code Learning Appilcation ! \\n\"); // print statement to display output on the screen<BR>\r\nreturn 0; // Indicates that the main function returns null value<BR>\r\n}<BR></B>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(7, 'Character Set', '<B>Character set</B>\r\nA character set is a set of alphabets, letters and some special characters that are valid in C language.<BR>\r\n<BR>\r\n<BR>\r\n<B> Alphabets </B>\r\nUppercase: A B C ................................... X Y Z<BR>\r\nLowercase: a b c ...................................... x y z<BR>\r\nC accepts both lowercase and uppercase alphabets as variables and functions.<BR>\r\n<BR>\r\n<BR>\r\n<B>Digits</B><BR>\r\n0 1 2 3 4 5 6 7 8 9<BR>\r\n<BR>\r\n<B>Special Characters<BR></B>\r\n<BR>\r\n<B>Special Characters in C Programming</B>\r\n,	<	>	.	_<BR>\r\n(	)	;	$	:<BR>\r\n%	[	]	#	?<BR>\r\n\'	&	{	}	\"<BR>\r\n^	!	*	/	|<BR>\r\n-	\\	~	+	 <BR>\r\n<BR>\r\n<B> White space Characters<BR></B>\r\n<BR>\r\n\r\nBlank space, newline, horizontal tab, carriage return and form feed.<BR>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'alphabets digits special characters whitespaces', 'character set', NULL, NULL, NULL),
(8, 'Keywords in c', '<B>A keyword is a reserved word.</B> You cannot use it as a variable name, constant name, etc.\r\n<BR>\r\n There are only <b><span style=\\\"color:#D63384\\\"> 32 reserved words (keywords) </span></b> in the C language.', '<B>A list of 32 keywords in the c language is given below:</b>\r\n\r\n<CENTER><b><span style=\\\"color:#D63384\\\">  auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef	union, unsigned, void, volatile, while</CENTER> </span></b>\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'keyword keywords', 'keyword', NULL, NULL, NULL),
(9, 'Identifiers', 'In C language identifiers are the names given to variables, constants, functions and user-define data. <br>These identifier are defined against a set of rules.<BR>\r\n<BR>\r\n<BR>\r\n<b><mark> Rules for an Identifier<BR></mark></b>\r\n<BR><span style=\\\"color:#D63384\\\"> \r\n1. An Identifier can only have alphanumeric characters(a-z , A-Z , 0-9) and underscore(_).<BR>\r\n2. The first character of an identifier can only contain alphabet(a-z , A-Z) or underscore (_).<BR>\r\n3. Identifiers are also case sensitive in C. For example name and Name are two different identifiers in C.<BR>\r\n4. Keywords are not allowed to be used as Identifiers.<BR>\r\n5. No special characters, such as semicolon, period, whitespaces, slash or comma are permitted to be used in or as Identifier.<BR> </span>\r\n', 'When we declare a variable or any function in C language program, to use it we must provide a name to it, which identified it throughout the program, for example:<BR>\r\n\r\n<B><span style=\\\"color:#D63384\\\"> int myvariable = \"Studytonight\";</B><BR> </span>\r\n\r\n', 'Here myvariable is the name or identifier for the variable which stores the value \"Studytonight\" in it.<BR>\r\n\r\n', NULL, NULL, NULL, NULL, NULL, NULL, 'identifier', 'identifier', NULL, NULL, NULL),
(10, 'Data types\r\n', 'Data types specify how we enter data into our programs and what type of data we enter.<BR>\r\n <B>C language has some predefined set of data types to handle various kinds of data that we can use in our program. \r\nThese datatypes have different storage capacities.</B><BR>\r\n<BR>\r\n<b><mark> Primary (Fundamental) data types in C programming includes the 4 most basic data types, that is:</mark></b><BR>\r\n<BR>\r\n<b><span style=\\\"color:#D63384\\\"> int: </span></b><BR> It is responsible for storing integers. The memory it occupies depends on the compiler (32 or 64 bit). In general, int data type occupies 4 bytes of memory when working with a 32-bit compiler.<BR>\r\n<BR>\r\n<b><span style=\\\"color:#D63384\\\"> float: </span></b><BR> It is responsible for storing fractions or digits up to 7 decimal places. It is usually referred to as a single-precision floating-point type. It occupies 4 bytes of memory<BR>\r\n<BR>\r\n<b><span style=\\\"color:#D63384\\\"> char: </span></b><BR>It can be used to store a set of all characters which may include alphabets, numbers and special characters. It occupies 1 byte of memory being the smallest addressable unit of a machine containing a fundamental character set.<BR>\r\n<BR>\r\n\r\n<b><span style=\\\"color:#D63384\\\"> double: </span></b><BR> It is responsible for storing fractions or digits up to 15-16 decimal places. It is usually referred to as a double-precision floating-point type.<BR>\r\n<BR>\r\n<b><span style=\\\"color:#D63384\\\"> void (Null) data type:  </span></b><BR>It indicates zero or no return value. It is generally used to assign the null value while declaring a function.\r\n<b><span style=\\\"color:#D63384\\\"> Learn the Samurai Technique to implement Arrays in C </span></b><BR>\r\n<BR>\r\n\r\nAlong with data types, comes modifiers.<b><mark>  Modifiers basically alter the function of a data type</mark></b> and make it more specific by the inclusion of additional provisions.<BR>\r\n These include:<BR>\r\n<BR>\r\n<b><span style=\\\"color:#D63384\\\"> Signed: </span></b><BR> It is used to store zero, positive or negative values.<BR>\r\n<BR>\r\n<b><span style=\\\"color:#D63384\\\"> Unsigned: </span></b> <BR>It can store only zero or positive values.<BR>\r\n<BR>\r\n<b><span style=\\\"color:#D63384\\\"> Long: </span></b> <BR> It is used to store large integer numbers. The size of the long type is 8 bytes.<BR>\r\n<BR>\r\n<b><span style=\\\"color:#D63384\\\"> Short: </span></b><BR> It is used to store small integer numbers. Its size is of 2 Bytes.<BR>', '<h2>Integer type</h2>\r\n<p>Integers are used to store whole numbers.</p>\r\n<p><b>Size and range of Integer type on 16-bit machine:</b></p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th>Type</th><th>Size(bytes)</th><th>Range</th></tr>\r\n<tr><td>int or signed int</td><td>2</td><td>-32,768 to 32767</td></tr>\r\n<tr><td>unsigned int</td><td>2</td><td>0 to 65535</td></tr>\r\n<tr><td>short int or signed short int</td><td>1</td><td>-128 to 127</td></tr>\r\n<tr><td>unsigned short int</td><td>1</td><td>0 to 255</td></tr>\r\n<tr><td>long int or signed long int</td><td>4</td><td>-2,147,483,648 to 2,147,483,647</td></tr>\r\n<tr><td>unsigned long int</td><td>4</td><td>0 to 4,294,967,295</td></tr>\r\n</tbody></table>\r\n<br>\r\n<hr>\r\n<h2>Floating point type</h2>\r\n<p>Floating types are used to store real numbers.</p>\r\n<p><b>Size and range of Integer type on 16-bit machine</b></p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th>Type</th><th>Size(bytes)</th><th>Range</th></tr>\r\n<tr><td>Float</td><td>4</td><td>3.4E-38 to 3.4E+38</td></tr>\r\n<tr><td>double</td><td>8</td><td>1.7E-308 to 1.7E+308</td></tr>\r\n<tr><td>long double</td><td>10</td><td>3.4E-4932 to 1.1E+4932</td></tr>\r\n</tbody></table>\r\n<hr>\r\n<h2>Character type</h2>\r\n<p>Character types are used to store characters value.</p>\r\n<p><b>Size and range of Integer type on 16-bit machine</b></p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th>Type</th><th>Size(bytes)</th><th>Range</th></tr>\r\n<tr><td>char or signed char</td><td>1</td><td>-128 to 127</td></tr>\r\n<tr><td>unsigned char</td><td>1</td><td>0 to 255</td></tr>\r\n</tbody></table>\r\n<hr>\r\n<h2>void type</h2>\r\n<p><code>void</code> type means no value. This is usually used to specify the type of functions which returns nothing. .</p>\r\n', NULL, NULL, NULL, '<h3><span style=\\\"color:#D63384\\\">#include <stdio.h><BR>\r\nint main()<BR>\r\n{<BR>\r\nint number1 = 400;<BR>\r\nshort int number2 = 500;<BR>\r\nunsigned short int number3 = 600;<BR>\r\nlong int number4 = 700;<BR>\r\nunsigned long int number5 = 800;<BR>\r\nunsigned long long int number6 = 900;<BR>\r\nchar character1 =\'A\';<BR>\r\nsigned char character2 =\'B\';<BR>\r\nunsigned char character3 =\'C\';<BR>\r\nfloat digit1 =20.00;<BR>\r\ndouble digit2 = 3.14159;<BR>\r\nlong double digit3 = 1.414213;<BR>\r\n<BR>\r\nprintf(\"Welcome to CLA!\\n\\n\");<BR>\r\n <BR>\r\n//Print statements to show the size of various data types<BR>\r\n<BR>\r\nprintf(\"The size of int data type %d is: %lu bytes.\\n\", number1,sizeof(number1));<BR>\r\nprintf(\"The size of short int data type %d is: %lu bytes.\\n\", number2,sizeof(number2));<BR>\r\nprintf(\"The size of unsigned short int data type %d is: %lu bytes.\\n\", number3,sizeof(number3));<BR>\r\nprintf(\"The size of long int data type %ld is: %lu bytes.\\n\", number4,sizeof(number4));<BR>\r\nprintf(\"The size of unsigned long int data type %ld is: %lu bytes.\\n\", number5,sizeof(number5));<BR>\r\nprintf(\"The size of unsigned long long int data type %lld is: %lu bytes.\\n\", number6,sizeof(number6));<BR>\r\nprintf(\"The size of char %c is: %lu byte.\\n\", character1,sizeof(character1));<BR>\r\nprintf(\"The size of signed char %c is: %lu byte.\\n\", character2,sizeof(character2));<BR>\r\nprintf(\"The size of unsigned char %c is: %lu byte.\\n\", character3,sizeof(character3));<BR>\r\nprintf(\"The size of float data type %f is: %ld bytes.\\n\", digit1,sizeof(digit1));<BR>\r\nprintf(\"The size of double data type %lf is: %ld bytes.\\n\", digit2,sizeof(digit2));<BR>\r\nprintf(\"The size of long double data type %Lf is: %ld bytes.\\n\", digit3,sizeof(digit3));<BR>\r\nreturn 0;    <BR>\r\n}</h3><BR> </span>', NULL, NULL, NULL, NULL, 'data types', NULL, NULL, NULL),
(11, 'Operators in C', '\r\n<p>\r\nC language supports a rich set of built-in operators. An operator is a symbol that tells the compiler to perform a certain mathematical or logical manipulation. Operators are used in programs to manipulate data and variables.\r\n</p>\r\n<p>\r\nC operators can be classified into following types:</p>\r\n<ul class=\"content\">\r\n<li>Arithmetic operators</li>\r\n<li>Relational operators </li>\r\n<li>Logical operators</li>\r\n<li>Bitwise operators</li>\r\n<li>Assignment operators</li>\r\n<li>Conditional operators</li>\r\n<li>Special operators</li>\r\n</ul>\r\n', '<h3>Arithmetic operators</h3>\r\n<p>\r\nC supports all the basic arithmetic operators. The following table shows all the basic arithmetic operators.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th>Operator</th><th>Description</th></tr>\r\n<tr><td>+</td><td>adds two operands</td></tr>\r\n<tr><td>-</td><td>subtract second operands from first</td></tr>\r\n<tr><td>*</td><td>multiply two operand</td></tr>\r\n<tr><td>/</td><td>divide numerator by denominator</td></tr>\r\n<tr><td>%</td><td>remainder of division</td></tr>\r\n<tr><td>++</td><td>Increment operator - increases integer value by one</td></tr>\r\n<tr><td>--</td><td>Decrement operator - decreases integer value by one</td></tr>\r\n</tbody></table>\r\n<h3>Relational operators</h3>\r\n<p>\r\nThe following table shows all relation operators supported by C. </p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th>Operator</th><th>Description</th></tr>\r\n<tr><td>==</td><td>Check if two operand are equal</td></tr>\r\n<tr><td>!=</td><td>Check if two operand are not equal.</td></tr>\r\n<tr><td> &gt; </td><td>Check if operand on the left is greater than operand on the right</td></tr>\r\n<tr><td> &lt; </td><td>Check operand on the left is smaller than right operand</td></tr>\r\n<tr><td> &gt;= </td><td>check left operand is greater than or equal to right operand</td></tr>\r\n<tr><td> &lt;= </td><td>Check if operand on left is smaller than or equal to right operand</td></tr>\r\n</tbody></table>\r\n<h3>Logical operators</h3>\r\n<p>\r\nC language supports following 3 logical operators. Suppose <code>a = 1</code> and <code>b = 0</code>,</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th> Operator </th><th>Description</th><th>Example</th></tr>\r\n<tr><td> &amp;&amp; </td><td>Logical AND</td><td>(a &amp;&amp; b) is false</td></tr>\r\n<tr><td> || </td><td>Logical OR</td><td>(a || b) is true</td></tr>\r\n<tr><td> ! </td><td>Logical NOT</td><td>(!a) is false</td></tr>\r\n</tbody></table>\r\n<h3>Bitwise operators</h3>\r\n<p>\r\nBitwise operators perform manipulations of data at <b>bit level</b>. These operators also perform <b>shifting of bits</b> from right to left. Bitwise operators are not applied to <code>float</code> or <code>double</code>(These are <a href=\"datatype-in-c.php\" target=\"_blank\">datatypes</a>, we will learn about them in the next tutorial). </p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th> Operator </th><th>Description</th></tr>\r\n<tr><td> &amp; </td><td>Bitwise AND</td></tr>\r\n<tr><td> | </td><td>Bitwise OR</td></tr>\r\n<tr><td> ^ </td><td>Bitwise exclusive OR</td></tr>\r\n<tr><td> &lt;&lt; </td><td>left shift</td></tr>\r\n<tr><td> &gt;&gt; </td><td>right shift</td></tr>\r\n</tbody></table>\r\n<p>\r\nNow lets see truth table for bitwise <code>&amp;</code>, <code>|</code> and <code>^</code>\r\n</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th> a </th><th>b</th><th>a &amp; b</th><th>a | b</th><th>a ^ b</th></tr>\r\n<tr><td> 0 </td><td>0</td><td>0</td><td>0</td><td>0</td></tr>\r\n<tr><td> 0 </td><td>1</td><td>0</td><td>1</td><td>1</td></tr>\r\n<tr><td> 1 </td><td>0</td><td>0</td><td>1</td><td>1</td></tr>\r\n<tr><td> 1 </td><td>1</td><td>1</td><td>1</td><td>0</td></tr>\r\n</tbody></table>\r\n<p></p>\r\n<h3>Assignment Operators</h3>\r\n<p>\r\nAssignment operators supported by C language are as follows.</p>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th> Operator </th><th>Description</th><th>Example</th></tr>\r\n<tr><td> = </td><td>assigns values from right side operands to left side operand</td><td>a=b</td></tr>\r\n<tr><td> += </td><td>adds right operand to the left operand and assign the result to left</td><td>a+=b is same as a=a+b</td></tr>\r\n<tr><td> -= </td><td>subtracts right operand from the left operand and assign the result to left operand</td><td>a-=b is same as a=a-b</td></tr>\r\n<tr><td> *= </td><td>mutiply left operand with the right operand and assign the result to left operand</td><td>a*=b is same as a=a*b </td></tr>\r\n<tr><td> /= </td><td>divides left operand with the right operand and assign the result to left operand</td><td>a/=b is same as a=a/b </td></tr>\r\n<tr><td> %= </td><td>calculate modulus using two operands and assign the result to left operand</td><td>a%=b is same as a=a%b </td></tr>\r\n</tbody></table>\r\n<h3>Special operator</h3>\r\n<table class=\"table table-bordered table-striped\">\r\n<tbody><tr><th> Operator </th><th>Description</th><th>Example</th></tr>\r\n<tr><td> sizeof </td><td>Returns the size of an variable</td><td> <b>sizeof(x)</b> return size of the variable <b>x</b></td></tr>\r\n<tr><td> &amp; </td><td>Returns the address of an variable</td><td><b>&amp;x ;</b> return address of the variable <b>x</b></td></tr>\r\n<tr><td> * </td><td>Pointer to a variable</td><td><b>*x ;</b> will be pointer to a variable <b>x</b></td></tr>\r\n</tbody></table>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(12, 'Output in C', '<h2 id=\"c-out\">C Output</h2>\r\n<p>In C programming, <code>printf()</code> is one of the main output function. The function sends formatted output to the screen. For example,</p>', '', NULL, NULL, NULL, '<h3>Example 1: C Output</h3>\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;    </span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{ \r\n    <span class=\"hljs-comment\">// Displays the string inside quotations</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"C Programming\"</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<p><strong>Output</strong></p>\r\n<pre><samp>C Programming</samp></pre>\r\n', '<ul>\r\n	<li>All valid C programs must contain the <code>main()</code> function. The code execution begins from the start of the <code>main()</code> function.</li>\r\n	<li>The <code>printf()</code> is a library function to send formatted output to the screen. The function prints the string inside quotations.</li>\r\n	<li>To use <code>printf()</code> in our program, we need to include <code>stdio.h</code> header file using the&nbsp;<code>#include &lt;stdio.h&gt;</code> statement.</li>\r\n	<li>The <code>return 0;</code> statement inside the <code>main()</code> function is the \"Exit status\" of the program. It\'s optional.</li>\r\n</ul>\r\n', '<h3 id=\"integer-output\">Example 2: Integer Output</h3>\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">int</span> testInteger = <span class=\"hljs-number\">5</span>;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Number = %d\"</span>, testInteger);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<p><strong>Output</strong></p>\r\n<pre><samp>Number = 5</samp></pre>\r\n', '\r\n<p>We use <code>%d</code> format specifier to print <code>int</code> types. Here, the <code>%d</code> inside the quotations will be replaced by the value of <var>testInteger</var>.</p>\r\n', NULL, 'output', NULL, NULL, NULL),
(13, 'C if Statement', '<p class=\"editor-contents__short-description\">In this tutorial, you will learn about if statement (including if...else and nested if..else) in C programming with the help of examples.</p>\r\n', '\r\n<h2 id=\"if-statement\">C if Statement</h2>\r\n<p>The syntax of the <code>if</code> statement in C programming is:</p>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">if</span> (test expression) \r\n{\r\n   <span class=\"hljs-comment\">// statements to be executed if the test expression is true</span>\r\n}</code></pre>\r\n', '<p>The <code>if</code> statement evaluates the test expression inside the parenthesis <code>()</code>.</p>\r\n<ul>\r\n	<li>If the test expression is evaluated to true, statements inside the body of <code>if</code> are executed.</li>\r\n	<li>If the test expression is evaluated to false, statements inside the body of <code>if</code> are not executed.</li>\r\n</ul>', NULL, NULL, '<h3 id=\"example-if\">Example 1: if statement</h3>\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Program to display a number if it is negative</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">int</span> number;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter an integer: \"</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;number);\r\n\r\n    <span class=\"hljs-comment\">// true if number is less than 0</span>\r\n    <span class=\"hljs-keyword\">if</span> (number &lt; <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"You entered %d.\\n\"</span>, number);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"The if statement is easy.\"</span>);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<p><strong>Output 1</strong></p>\r\n<pre><samp>Enter an integer: -2\r\nYou entered -2.\r\nThe if statement is easy.</samp></pre>\r\n', '<p>When the user enters -2, the test expression <code>number&lt;0</code> is evaluated to true. Hence, <samp>You entered -2</samp> is displayed on the screen.</p>', '', '', NULL, 'if else', NULL, NULL, NULL),
(14, 'C if...else Statement', '<p>The <code>if</code> statement may have an optional <code>else</code> block. The syntax of the <code>if..else</code> statement is:</p>', '<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">if</span> (test expression) {\r\n    <span class=\"hljs-comment\">// statements to be executed if the test expression is true</span>\r\n}\r\n<span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-comment\">// statements to be executed if the test expression is false</span>\r\n}</code></pre>', '<p>If the test expression is evaluated to true,</p>\r\n<ul>\r\n	<li>statements inside the body of <code>if</code> are executed.</li>\r\n	<li>statements inside the body of <code>else</code> are skipped from execution.</li>\r\n</ul>\r\n<p>If the test expression is evaluated to false,</p>\r\n<ul>\r\n	<li>statements inside the body of <code>else</code> are executed</li>\r\n	<li>statements inside the body of <code>if</code> are skipped from execution.</li>\r\n</ul>', NULL, NULL, '<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Check whether an integer is odd or even</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">int</span> number;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter an integer: \"</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;number);\r\n\r\n    <span class=\"hljs-comment\">// True if the remainder is 0</span>\r\n    <span class=\"hljs-keyword\">if</span>  (number%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d is an even integer.\"</span>,number);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d is an odd integer.\"</span>,number);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<BR>\r\n<pre><samp>Enter an integer: 7\r\n7 is an odd integer.</samp></pre>', '<p>When the user enters 7, the test expression <code>number%2==0</code> is evaluated to false. Hence, the statement inside the body of <code>else</code> is executed.</p>', '', '', NULL, 'ifelse\r\n', NULL, NULL, NULL),
(15, 'C if...else Ladder', '<p>The <code>if...else</code> statement executes two different codes depending upon whether the test expression is true or false. Sometimes, a choice has to be made from more than 2 possibilities.</p>\r\n<p>The if...else ladder allows you to check between multiple test expressions and execute different statements.</p>', '<h3>Syntax of if...else Ladder</h3>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">if</span> (test expression1) {\r\n   <span class=\"hljs-comment\">// statement(s)</span>\r\n}\r\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(test expression2) {\r\n   <span class=\"hljs-comment\">// statement(s)</span>\r\n}\r\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (test expression3) {\r\n   <span class=\"hljs-comment\">// statement(s)</span>\r\n}\r\n.\r\n.\r\n<span class=\"hljs-keyword\">else</span> {\r\n   <span class=\"hljs-comment\">// statement(s)</span>\r\n}</code></pre>', NULL, NULL, NULL, '<h3 id=\"if-else-ladder-example\">Example 1: C if...else Ladder</h3>\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Program to relate two integers using =, &gt; or &lt; symbol</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">int</span> number1, number2;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter two integers: \"</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d %d\"</span>, &amp;number1, &amp;number2);\r\n\r\n    <span class=\"hljs-comment\">//checks if the two integers are equal.</span>\r\n    <span class=\"hljs-keyword\">if</span>(number1 == number2) {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %d = %d\"</span>,number1,number2);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//checks if number1 is greater than number2.</span>\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (number1 &gt; number2) {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %d &gt; %d\"</span>, number1, number2);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//checks if both test expressions are false</span>\r\n    <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %d &lt; %d\"</span>,number1, number2);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n\r\n<p><strong>Output</strong></p>\r\n<pre><samp>Enter two integers: 12\r\n23\r\nResult: 12 &lt; 23</samp></pre>\r\n', NULL, NULL, NULL, NULL, 'ifelse', NULL, NULL, NULL),
(16, 'Nested if...else', '<p>It is possible to include an <code>if...else</code> statement inside the body of another <code>if...else</code> statement.</p><BR>\r\n<p class=\"note-tip\">If the body of an <code>if...else</code> statement has only one statement, you do not need to use brackets <code>{}</code>.</p>', NULL, NULL, NULL, NULL, '<h3 id=\"example-nested-if-else\">Example 4: Nested if...else</h3>\r\n<p>This program given below relates two integers using either <code>&lt;</code>, <code>&gt;</code> and <code>=</code> similar to the <code>if...else</code> ladder\'s example. However, we will use a nested <code>if...else</code> statement to solve this problem.</p>\r\n\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">int</span> number1, number2;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter two integers: \"</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d %d\"</span>, &amp;number1, &amp;number2);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (number1 &gt;= number2) {\r\n      <span class=\"hljs-keyword\">if</span> (number1 == number2) {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %d = %d\"</span>,number1,number2);\r\n      }\r\n      <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %d &gt; %d\"</span>, number1, number2);\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Result: %d &lt; %d\"</span>,number1, number2);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<hr>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(17, 'C switch Statement', '\r\n<div class=\"content\">\r\n      <p id=\"introduction\">The switch statement allows us to execute one code block among many alternatives.</p>\r\n\r\n<p>You can do the same thing with the <code>if...else..if</code> ladder. However, the syntax of the <code>switch</code> statement is much easier to read and write.</p>\r\n\r\n<hr>\r\n\r\n<ol class=\"content\">\r\n<li>The expression (after switch keyword) must yield an <b>integer</b> value i.e the expression should be an integer or a variable or an expression that evaluates to an integer.</li>\r\n<li>The case <b>label</b> values must be unique.</li>\r\n<li>The case label must end with a colon(:)</li>\r\n<li>The next line, after the <b>case</b> statement, can be any valid C statement.</li>\r\n</ol>', '<h2 id=\"switch-syntax\">Syntax of switch...case</h2>\r\n\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">switch</span> (expression)\r\nâ€‹{\r\n    <span class=\"hljs-keyword\">case</span> constant1:\r\n      <span class=\"hljs-comment\">// statements</span>\r\n      <span class=\"hljs-keyword\">break</span>;\r\n\r\n    <span class=\"hljs-keyword\">case</span> constant2:\r\n      <span class=\"hljs-comment\">// statements</span>\r\n      <span class=\"hljs-keyword\">break</span>;\r\n    .\r\n    .\r\n    .\r\n    <span class=\"hljs-keyword\">default</span>:\r\n      <span class=\"hljs-comment\">// default statements</span>\r\n}</code></pre>\r\n', '<p>The <var>expression</var> is evaluated once and compared with the values of each <var>case</var> label.</p>\r\n\r\n<ul>\r\n	<li>If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to <var>constant2</var>, statements after <code>case constant2:</code> are executed until <code>break</code> is encountered.</li>\r\n	<li>If there is no match, the default statements are executed.</li>\r\n</ul>\r\n\r\n<p class=\"note-tip\">If we do not use <code>break</code>, all statements after the matching label are executed.</p>\r\n\r\n<p class=\"note-tip\">By the way, the <code>default</code> clause inside the <code>switch</code> statement is optional.</p>\r\n\r\n<hr>\r\n\r\n\r\n', NULL, NULL, '<h3 id=\"example-switch\">Example: Simple Calculator</h3>\r\n\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Program to create a simple calculator</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">char</span> <span class=\"hljs-keyword\">operator</span>;\r\n    <span class=\"hljs-keyword\">double</span> n1, n2;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter an operator (+, -, *, /): \"</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%c\"</span>, &amp;<span class=\"hljs-keyword\">operator</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter two operands: \"</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%lf %lf\"</span>,&amp;n1, &amp;n2);\r\n\r\n    <span class=\"hljs-keyword\">switch</span>(<span class=\"hljs-keyword\">operator</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'+\'</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%.1lf + %.1lf = %.1lf\"</span>,n1, n2, n1+n2);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'-\'</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%.1lf - %.1lf = %.1lf\"</span>,n1, n2, n1-n2);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'*\'</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%.1lf * %.1lf = %.1lf\"</span>,n1, n2, n1*n2);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'/\'</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%.1lf / %.1lf = %.1lf\"</span>,n1, n2, n1/n2);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-comment\">// operator doesn\'t match any case constant +, -, *, /</span>\r\n        <span class=\"hljs-keyword\">default</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Error! operator is not correct\"</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n</code></pre>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre><samp>Enter an operator (+, -, *,): -\r\nEnter two operands: 32.5\r\n12.4\r\n32.5 - 12.4 = 20.1</samp></pre>', '</div><div class=\"clearfix\"></div><p>The <var>-</var> operator entered by the user is stored in the <var>operator</var> variable. And, two operands <var>32.5</var> and <var>12.4</var> are stored in variables <var>n1</var> and <var>n2</var> respectively.</p>\r\n\r\n<p>Since the <var>operator</var> is <code>-</code>, the control of the program jumps to</p>\r\n\r\n<pre>printf(\"%.1lf - %.1lf = %.1lf\", n1, n2, n1-n2);</pre>\r\n\r\n<p>Finally, the <b>break statement</b> terminates the <code>switch</code> statement.</p>\r\n  </div>', NULL, NULL, NULL, 'switch', NULL, NULL, NULL),
(18, 'While Loop in C', '<p>As per the above diagram, if the Test Condition is true, then the loop is executed, and if it is false then the execution breaks out of the loop. After the loop is successfully executed the execution again starts from the Loop entry and again checks for the Test condition, and this keeps on repeating.</p>\r\n\r\n<p>The sequence of statements to be executed is kept inside the curly braces <code>{ }</code> known as the <b>Loop body</b>. After every execution of the loop body, <b>condition</b> is verified, and if it is found to be <b>true</b> the loop body is executed again. When the condition check returns <b>false</b>, the loop body is not executed, and execution breaks out of the loop.</p>\r\n\r\n<h2>Types of Loop</h2>\r\n<ol class=\"content\">\r\n<li><code>while</code> loop</li>\r\n<li><code>for</code> loop</li>\r\n<li><code>do while</code> loop</li>\r\n</ol>', '<h2 id=\"while-loop\">while loop</h2>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">while</span> (testExpression) \r\n{\r\n    <span class=\"hljs-comment\">// statements inside the body of the loop </span>\r\n}</code></pre>', '<ul>\r\n	<li>The <code>while</code> loop evaluates the test expression inside the parenthesis <code>()</code>.</li>\r\n	<li>If the test expression is true, statements inside the body of <code>while</code> loop are executed. Then, the test expression is evaluated again.</li>\r\n	<li>The process goes on until the test expression is evaluated to false.</li>\r\n	<li>If the test expression is false, the loop terminates (ends).</li>\r\n</ul>', NULL, NULL, '<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Print numbers from 1 to 5</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\r\n    \r\n    <span class=\"hljs-keyword\">while</span> (i &lt;= <span class=\"hljs-number\">5</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>, i);\r\n        ++i;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Print numbers from 1 to 5</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\r\n    \r\n    <span class=\"hljs-keyword\">while</span> (i &lt;= <span class=\"hljs-number\">5</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>, i);\r\n        ++i;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<pre><samp>1\r\n2\r\n3\r\n4\r\n5</samp>\r\n</pre>', '<ol>\r\n	<li>When <var>i</var> is 1, the test expression <code>i &lt;= 5</code> is true. Hence, the body of the <code>while</code> loop is executed. This prints 1 on the screen and the value of <var>i</var> is increased to 2.</li>\r\n	<li>Now, <var>i</var> is 2, the test expression <code>i &lt;= 5</code> is again true. The body of the <code>while</code> loop is executed again. This prints 2 on the screen and the value of <code>i</code> is increased to 3.</li>\r\n	<li>This process goes on until <var>i</var> becomes 6. When <var>i</var> is 6, the test expression <code>i &lt;= 5</code> will be false and the loop terminates.</li>\r\n</ol>', NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(19, 'Do...While loop', '<p>The <code>do..while</code> loop is similar to the <code>while</code> loop with one important difference. The body of <code>do...while</code> loop is executed at least once. Only then, the test expression is evaluated.</p>', '<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">do</span>\r\n{\r\n   <span class=\"hljs-comment\">// statements inside the body of the loop</span>\r\n}\r\n<span class=\"hljs-keyword\">while</span> (testExpression);</code></pre>', '<ul>\r\n	<li>The body of do...while loop is executed once. Only then, the test expression is evaluated.</li>\r\n	<li>If the test expression is true, the body of the loop is executed again and the test expression is evaluated.</li>\r\n	<li>This process goes on until the test expression becomes false.</li>\r\n	<li>If the test expression is false, the loop ends.</li>\r\n</ul>', NULL, NULL, '\r\n\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Program to add numbers until the user enters zero</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">double</span> number, sum = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// the body of the loop is executed at least once</span>\r\n    <span class=\"hljs-keyword\">do</span>\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter a number: \"</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%lf\"</span>, &amp;number);\r\n        sum += number;\r\n    }\r\n    <span class=\"hljs-keyword\">while</span>(number != <span class=\"hljs-number\">0.0</span>);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Sum = %.2lf\"</span>,sum);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n\r\n<HR>\r\n<p><strong>Output</strong></p>\r\n<pre><samp>Enter a number: 1.5\r\nEnter a number: 2.4\r\nEnter a number: -3.4\r\nEnter a number: 4.2\r\nEnter a number: 0\r\nSum = 4.70</samp>\r\n</pre>', NULL, NULL, NULL, NULL, 'dowhile', NULL, NULL, NULL),
(20, 'For Loop', '<p><code>for</code> loop is used to execute a set of statements repeatedly until a particular condition is satisfied. We can say it is an <b>open ended loop.</b>. General format is,</p>', '<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">for</span> (initializationStatement; testExpression; updateStatement)\r\n{\r\n    <span class=\"hljs-comment\">// statements inside the body of loop</span>\r\n}</code></pre>', '<ul>\r\n	<li>The initialization statement is executed only once.</li>\r\n	<li>Then, the test expression is evaluated. If the test expression is evaluated to false, the <code>for</code> loop is terminated.</li>\r\n	<li>However, if the test expression is evaluated to true, statements inside the body of <code>for</code> loop are executed, and the update expression is updated.</li>\r\n	<li>Again the test expression is evaluated.</li>\r\n</ul>\r\n<p>This process goes on until the test expression is false. When the test expression is false, the loop terminates.</p>', NULL, NULL, '<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Print numbers from 1 to 10</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n  <span class=\"hljs-keyword\">int</span> i;\r\n\r\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">11</span>; ++i)\r\n  {\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, i);\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n</code></pre>\r\n<br>\r\n<strong>Output</strong>', '<ol>\r\n	<li><var>i</var> is initialized to 1.</li>\r\n	<li>The test expression <code>i &lt; 11</code> is evaluated. Since 1 less than 11 is true, the body of <code>for</code> loop is executed. This will print the <strong>1</strong> (value of <var>i</var>) on the screen.</li>\r\n	<li>The update statement <code>++i</code> is executed. Now, the value of <var>i</var> will be 2. Again, the test expression is evaluated to true, and the body of for loop is executed. This will print <strong>2</strong> (value of <var>i</var>) on the screen.</li>\r\n	<li>Again, the update statement <code>++i</code> is executed and the test expression <code>i &lt; 11</code> is evaluated. This process goes on until <var>i</var> becomes 11.</li>\r\n	<li>When <var>i</var> becomes 11, <var>i &lt; 11</var> will be false, and the <code>for</code> loop terminates.</li>\r\n</ol>', NULL, NULL, NULL, 'for loop', NULL, NULL, NULL);
INSERT INTO `c_lang` (`id`, `indextopic`, `content`, `syntax`, `syntaxdef`, `syntax2`, `syntaxdef2`, `example`, `exampledef`, `example2`, `exampledef2`, `searchword`, `keyword`, `diagram1`, `diagram2`, `diagram3`) VALUES
(21, 'Arrays in C', '<p>\r\nIn C language, <code>arrays</code> are reffered to as structured <a href=\"datatype-in-c.php\" target=\"_blank\">data types</a>. An array is defined as <b>finite ordered collection of homogenous</b> data, stored in contiguous memory locations.</p>\r\n<p>Here the words,</p>\r\n<ul class=\"content\">\r\n<li><b>finite</b> <i>means</i> data range must be defined.</li>\r\n<li><b>ordered</b> <i>means</i> data must be stored in continuous memory addresses.</li>\r\n<li><b>homogenous</b> <i>means</i> data must be of similar data type.</li>\r\n</ul>\r\n<BR>\r\n<h3>Example where arrays are used,</h3>\r\n\r\n<ul class=\"content\">\r\n<li>to store list of Employee or Student names,</li>\r\n<li>to store marks of students,</li>\r\n<li>or to store list of numbers or characters etc.</li>\r\n</ul>\r\n<p>Since arrays provide an easy way to represent data, it is classified amongst the <a href=\"introduction-to-data-structures.php\" target=\"_blank\">data structures</a> in C. Other data structures in c are <b>structure</b>, <b>lists</b>, <b>queues</b>, <b>trees</b> etc. Array can be used to represent not only simple list of data but also table of data in two or three dimensions.</p>', '<h2 id=\"declare\">How to declare an array?</h2>\r\n<pre>dataType arrayName[arraySize];\r\n</pre>\r\n<p><strong>For example,</strong></p>\r\n<pre>float mark[5];</pre>\r\n<p>Here, we declared an array, <var>mark</var>, of floating-point type. And its size is 5. Meaning, it can hold 5 floating-point values.</p>\r\n<p>It\'s important to note that&nbsp;the size and type of an array cannot be changed once it is declared.</p>\r\n', '<h2 id=\"initialize\">How to initialize an array?</h2>\r\n<p>It is possible to initialize an array during declaration. For example,</p>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">int</span> mark[<span class=\"hljs-number\">5</span>] = {<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">9</span>};</code></pre>\r\n<p>You can also initialize an array like this.</p>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-keyword\">int</span> mark[] = {<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">9</span>};</code></pre>\r\n<p>Here, we haven\'t specified the size. However, the compiler knows its size is 5 as we are initializing it with 5 elements.<br>\r\n	<figure><img alt=\"Initialize an array in C programming\" src=\"//cdn.programiz.com/sites/tutorial2program/files/c-array-initialization.jpg\"></figure></p>\r\n  <p>Here,</p>\r\n  <pre>mark[0] is equal to 19\r\nmark[1] is equal to 10\r\nmark[2] is equal to 8\r\nmark[3] is equal to 17\r\nmark[4] is equal to 9</pre>\r\n', '<B><h2 id=\"input-output\">Input and Output Array Elements</h2></b>\r\n<p>Here\'s how you can take input from the user and store it in an array element.</p>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// take input and store it in the 3rd element</span>\r\nâ€‹<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;mark[<span class=\"hljs-number\">2</span>]);\r\n\r\n<span class=\"hljs-comment\">// take input and store it in the ith element</span>\r\n<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;mark[i<span class=\"hljs-number\">-1</span>]);</code>\r\n</pre>\r\n', '<p>Here\'s how you can print an individual element of an array.</p>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// print the first element of the array</span>\r\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, mark[<span class=\"hljs-number\">0</span>]);\r\n\r\n<span class=\"hljs-comment\">// print the third element of the array</span>\r\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, mark[<span class=\"hljs-number\">2</span>]);\r\n\r\n<span class=\"hljs-comment\">// print ith element of the array</span>\r\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, mark[i<span class=\"hljs-number\">-1</span>]);</code>\r\n</pre>\r\n', '<h2>Example 1: Array Input/Output</h2>\r\n<BR>\r\n\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Program to take 5 values from the user and store them in an array</span>\r\n<span class=\"hljs-comment\">// Print the elements stored in the array</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n  <span class=\"hljs-keyword\">int</span> values[<span class=\"hljs-number\">5</span>];\r\n\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter 5 integers: \"</span>);\r\n\r\n  <span class=\"hljs-comment\">// taking input and storing it in an array</span>\r\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; ++i) {\r\n     <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;values[i]);\r\n  }\r\n\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Displaying integers: \"</span>);\r\n\r\n  <span class=\"hljs-comment\">// printing elements of an array</span>\r\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; ++i) {\r\n     <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\\n\"</span>, values[i]);\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code>\r\n</pre>\r\n<p><strong>Output</strong></p>\r\n<pre><samp>Enter 5 integers: 1\r\n-3\r\n34\r\n0\r\n3\r\nDisplaying integers: 1\r\n-3\r\n34\r\n0\r\n3</samp>\r\n</pre>', '<p>Here, we have used a&nbsp;<code>for</code> loop to take 5 inputs from the user and store them in an array. Then, using another&nbsp;<code>for</code> loop, these elements are displayed on the screen.</p>', '<h2 id=\"example\">Example 2: Calculate Average</h2>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Program to find the average of n numbers using arrays</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n     <span class=\"hljs-keyword\">int</span> marks[<span class=\"hljs-number\">10</span>], i, n, sum = <span class=\"hljs-number\">0</span>, average;\r\n\r\n     <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter number of elements: \"</span>);\r\n     <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;n);\r\n\r\n     <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i&lt;n; ++i)\r\n     {\r\n          <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter number%d: \"</span>,i+<span class=\"hljs-number\">1</span>);\r\n          <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;marks[i]);\r\n          \r\n          <span class=\"hljs-comment\">// adding integers entered by the user to the sum variable</span>\r\n          sum += marks[i];\r\n     }\r\n\r\n     average = sum/n;\r\n     <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Average = %d\"</span>, average);\r\n\r\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code>\r\n</pre>\r\n<p><strong>Output</strong></p>\r\n\r\n<pre><samp>Enter n: 5\r\nEnter number1: 45\r\nEnter number2: 35\r\nEnter number3: 38\r\nEnter number4: 31\r\nEnter number5: 49\r\nAverage = 39\r\n</samp></pre>', NULL, NULL, 'array', NULL, NULL, NULL),
(22, 'C Multidimensional Arrays', '<p id=\"introduction\">In C programming, you can create an array of arrays. These arrays are known as multidimensional arrays. For example,</p>\r\n<h2 id=\"initialize\">Initializing a multidimensional array</h2>\r\n<p>Here is how you can initialize two-dimensional and three-dimensional arrays:</p>', '<h3>Initialization of a 2d array</h3>\r\n<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Different ways to initialize two-dimensional array</span>\r\n\r\n<span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>}};\r\n         \r\n<span class=\"hljs-keyword\">int</span> c[][<span class=\"hljs-number\">3</span>] = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>}};\r\n                \r\n<span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>};</code>\r\n</pre>\r\n<hr>\r\n<hr>\r\n<h3>Initialization of a 3d array<pre style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// Different ways to initialize two-dimensional array</span>\r\n\r\n<span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>}};\r\n         \r\n<span class=\"hljs-keyword\">int</span> c[][<span class=\"hljs-number\">3</span>] = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>}};\r\n                \r\n<span class=\"hljs-keyword\">int</span> c[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>};</code>\r\n</pre></h3>\r\n<BR>\r\n\r\n', NULL, NULL, NULL, '<h3 id=\"example-1\">Example 1: Two-dimensional array to store and print values</h3>\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// C program to store temperature of two cities of a week and display it.</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> CITY = <span class=\"hljs-number\">2</span>;\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> WEEK = <span class=\"hljs-number\">7</span>;\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n  <span class=\"hljs-keyword\">int</span> temperature[CITY][WEEK];\r\n\r\n  <span class=\"hljs-comment\">// Using nested loop to store values in a 2d array</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; CITY; ++i)\r\n  {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; WEEK; ++j)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"City %d, Day %d: \"</span>, i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>);\r\n      <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;temperature[i][j]);\r\n    }\r\n  }\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nDisplaying values: \\n\\n\"</span>);\r\n\r\n  <span class=\"hljs-comment\">// Using nested loop to display vlues of a 2d array</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; CITY; ++i)\r\n  {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; WEEK; ++j)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"City %d, Day %d = %d\\n\"</span>, i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>, temperature[i][j]);\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n</code></pre>\r\n<p><strong>Output</strong></p>\r\n<pre><samp>City 1, Day 1: 33\r\nCity 1, Day 2: 34\r\nCity 1, Day 3: 35\r\nCity 1, Day 4: 33\r\nCity 1, Day 5: 32\r\nCity 1, Day 6: 31\r\nCity 1, Day 7: 30\r\nCity 2, Day 1: 23\r\nCity 2, Day 2: 22\r\nCity 2, Day 3: 21\r\nCity 2, Day 4: 24\r\nCity 2, Day 5: 22\r\nCity 2, Day 6: 25\r\nCity 2, Day 7: 26\r\n\r\nDisplaying values: \r\n\r\nCity 1, Day 1 = 33\r\nCity 1, Day 2 = 34\r\nCity 1, Day 3 = 35\r\nCity 1, Day 4 = 33\r\nCity 1, Day 5 = 32\r\nCity 1, Day 6 = 31\r\nCity 1, Day 7 = 30\r\nCity 2, Day 1 = 23\r\nCity 2, Day 2 = 22\r\nCity 2, Day 3 = 21\r\nCity 2, Day 4 = 24\r\nCity 2, Day 5 = 22\r\nCity 2, Day 6 = 25\r\nCity 2, Day 7 = 26</samp></pre>\r\n<HR>\r\n<HR>\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// C program to find the sum of two matrices of order 2*2</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n  <span class=\"hljs-keyword\">float</span> a[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>], b[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>], result[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>];\r\n\r\n  <span class=\"hljs-comment\">// Taking input using nested for loop</span>\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter elements of 1st matrix\\n\"</span>);\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; ++i)\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">2</span>; ++j)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter a%d%d: \"</span>, i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>);\r\n      <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%f\"</span>, &amp;a[i][j]);\r\n    }\r\n\r\n  <span class=\"hljs-comment\">// Taking input using nested for loop</span>\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter elements of 2nd matrix\\n\"</span>);\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; ++i)\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">2</span>; ++j)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter b%d%d: \"</span>, i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>);\r\n      <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%f\"</span>, &amp;b[i][j]);\r\n    }\r\n\r\n  <span class=\"hljs-comment\">// adding corresponding elements of two arrays</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; ++i)\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">2</span>; ++j)\r\n    {\r\n      result[i][j] = a[i][j] + b[i][j];\r\n    }\r\n\r\n  <span class=\"hljs-comment\">// Displaying the sum</span>\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nSum Of Matrix:\"</span>);\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; ++i)\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">2</span>; ++j)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%.1f\\t\"</span>, result[i][j]);\r\n\r\n      <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\n\"</span>);\r\n    }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<BR>\r\n<BR>\r\n<BR>\r\n<BR>\r\n<HR>\r\n<p><strong>Output</strong></p>\r\n<pre><samp>Enter elements of 1st matrix\r\nEnter a11: 2;\r\nEnter a12: 0.5;\r\nEnter a21: -1.1;\r\nEnter a22: 2;\r\nEnter elements of 2nd matrix\r\nEnter b11: 0.2;\r\nEnter b12: 0;\r\nEnter b21: 0.23;\r\nEnter b22: 23;\r\n\r\nSum Of Matrix:\r\n2.2     0.5\r\n-0.9    25.0</samp></pre>\r\n', NULL, '<h3 id=\"example-3\">Example 3: Three-dimensional array</h3>\r\n\r\n<pre class=\"exec\" style=\"max-height: 600px;\"><code class=\"c hljs cpp\"><span class=\"hljs-comment\">// C Program to store and print 12 values entered by the user</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n  <span class=\"hljs-keyword\">int</span> test[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">2</span>];\r\n\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Enter 12 values: \\n\"</span>);\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; ++i)\r\n  {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">3</span>; ++j)\r\n    {\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">2</span>; ++k)\r\n      {\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;test[i][j][k]);\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Printing values with proper index.</span>\r\n\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nDisplaying values:\\n\"</span>);\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; ++i)\r\n  {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">3</span>; ++j)\r\n    {\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">2</span>; ++k)\r\n      {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"test[%d][%d][%d] = %d\\n\"</span>, i, j, k, test[i][j][k]);\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}</code></pre>\r\n<BR>\r\n<p><strong>Output</strong></p>\r\n<pre><samp>Enter 12 values: \r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n\r\nDisplaying Values:\r\ntest[0][0][0] = 1\r\ntest[0][0][1] = 2\r\ntest[0][1][0] = 3\r\ntest[0][1][1] = 4\r\ntest[0][2][0] = 5\r\ntest[0][2][1] = 6\r\ntest[1][0][0] = 7\r\ntest[1][0][1] = 8\r\ntest[1][1][0] = 9\r\ntest[1][1][1] = 10\r\ntest[1][2][0] = 11\r\ntest[1][2][1] = 12</samp></pre>', NULL, NULL, 'array 2darray 3darray', NULL, NULL, NULL),
(23, 'String and Character Array', '<p><strong>String</strong> is a sequence of characters that are treated as a single data item and terminated by a null character <code>\'\\0\'</code>. Remember that the C language does not support strings as a data type. A <strong>string</strong> is actually a one-dimensional array of characters in C language. These are often used to create meaningful and readable programs.</p>\r\n<p><strong>For example:</strong> The string \"home\" contains 5 characters including the <code>\'\\0\'</code> character which is automatically added by the compiler at the end of the string.</p>\r\n', '<h3>Declaring and Initializing a string variables:</h3>\r\n<pre class=\" language-c\"><code class=\" language-c\"><span class=\"token comment\">// valid</span>\r\n<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"StudyTonight\"</span><span class=\"token punctuation\">;</span>        \r\n<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\'c\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'o\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'d\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'e\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'\\0\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>      \r\n\r\n<span class=\"token comment\">// Illegal</span>\r\n<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>    \r\n<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\nstr <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>  </code></pre>\r\n<BR>\r\n<HR>\r\n<h3>String Input and Output:</h3>\r\n<ul>\r\n<li>\r\n<p><strong>%s</strong> format specifier to read a string input from the terminal.</p>\r\n</li>\r\n<li>\r\n<p>But Scanf() function, terminates its input on the first white space it encounters.</p>\r\n</li>\r\n<li>\r\n<p><strong>edit set conversion code %[..]</strong> that can be used to read a line containing a variety of characters, including white spaces.</p>\r\n</li>\r\n<li>\r\n<p>The <code>gets()</code> function can also be used to read character string with white spaces</p>\r\n</li>\r\n</ul>\r\n<BR>\r\n<pre class=\" language-c\"><code class=\" language-c\"><span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%[^\\n]\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre>\r\n<HR>\r\n<pre class=\" language-c\"><code class=\" language-c\"><span class=\"token keyword\">char</span> text<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><BR>\r\n\r\n', '', '<h3>String Handling Functions:</h3><p>C language supports a large number of string handling functions that can be used to carry out many of the string manipulations. These functions are packaged in the <strong>string.h</strong> library. Hence, you must include <strong>string.h</strong> header file in your programs to use these functions.</p>\r\n\r\n<table border=\"1\" cellpadding=\"10\" style=\"width:100%\">\r\n<tbody>\r\n<tr>\r\n<th>Method</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td><code>strcat()</code></td>\r\n<td>It is used to concatenate(combine) two strings</td>\r\n</tr>\r\n<tr>\r\n<td><code>strlen()</code></td>\r\n<td>It is used to show the length of a string</td>\r\n</tr>\r\n<tr>\r\n<td><code><code>strrev()</code></code></td>\r\n<td>It is used to show the reverse of a string</td>\r\n</tr>\r\n<tr>\r\n<td><code>strcpy()</code></td>\r\n<td>Copies one string into another</td>\r\n</tr>\r\n<tr>\r\n<td><code>strcmp()</code></td>\r\n<td>It is used to compare two string</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<HR>\r\n', NULL, NULL, NULL, NULL, NULL, NULL, 'stringarray characterarray', NULL, NULL, NULL),
(24, 'Functions in C', '\r\n<p>A <b>function</b> is a block of code that performs a particular task.</p>\r\n<p>There are many situations where we might need to write same line of code for more than once in a program. This may lead to unnecessary repetition of code, bugs and even becomes boring for the programmer. So, C language provides an approach in which you can declare and define a group of statements once in the form of a function and it can be called and used whenever required.\r\n</p>\r\n<p>These functions defined by the user are also know as <b>User-defined Functions</b></p>\r\n<p>C functions can be classified into two categories,</p>\r\n<ol class=\"content\">\r\n<li><b>Library functions</b></li>\r\n<li><b>User-defined functions</b></li>\r\n</ol>\r\n\r\n<p><b>Library functions</b> are those functions which are already defined in C library, example <code>printf()</code>, <code>scanf()</code>, <code>strcat()</code> etc. You just need to include appropriate header files to use these functions. These are already declared and defined in C libraries.</p>\r\n<p>A <b>User-defined functions</b> on the other hand, are those functions which are defined by the user at the time of writing program. These functions are made for code reusability and for saving time and space.</p>\r\n<HR>\r\n<h3>Benefits of Using Functions</h3>\r\n<ol class=\"content\">\r\n<li>It provides modularity to your program\'s structure.</li>\r\n<li>It makes your code reusable. You just have to call the function by its name to use it, wherever required.</li>\r\n<li>In case of large programs with thousands of code lines, debugging and editing becomes easier if you use functions.</li>\r\n<li>It makes the program more readable and easy to understand.</li>\r\n</ol>\r\n', '<h2>Function Declaration</h2>\r\n<p>\r\nGeneral syntax for function declaration is,</p>\r\n<pre class=\"c language-clike\"><code class=\" language-clike\">returntype <span class=\"token function\">functionName</span><span class=\"token punctuation\">(</span>type1 parameter1<span class=\"token punctuation\">,</span> type2 parameter2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\r\n', '\r\n<p>\r\nLike any variable or an array, a function must also be declared before its used. Function declaration informs the compiler about the function name, parameters is accept, and its return type. The actual body of the function can be defined separately. It\'s also called as <b>Function Prototyping</b>. Function declaration consists of 4 parts.</p>\r\n<HR>\r\n<ul class=\"content\">\r\n<li>returntype</li>\r\n<li>function name</li>\r\n<li>parameter list</li>\r\n<li>terminating semicolon</li>\r\n</ul>\r\n<HR>\r\n<h4>returntype</h4>\r\n<p>When a function is declared to perform some sort of calculation or any operation and is expected to provide with some result at the end, in such cases, a <code>return</code> statement is added at the end of function body. Return type specifies the type of value(<code>int</code>, <code>float</code>, <code>char</code>, <code>double</code>) that function is expected to return to the program which called the function.\r\n</p>\r\n<p><b>Note:</b> In case your function doesn\'t return any value, the return type would be <code>void</code>.</p>\r\n\r\n<HR>\r\n<h4>functionName</h4>\r\n<p>Function name is an <a href=\"/c/keywords-and-identifier.php\" target=\"_blank\">identifier</a> and it specifies the name of the function. The function name is any valid C identifier and therefore must follow the same naming rules like other variables in C language.</p>\r\n\r\n<HR>\r\n<h4>parameter list</h4>\r\n<p>The parameter list declares the type and number of arguments that the function expects when it is called. Also, the parameters in the parameter list receives the argument values when the function is called. They are often referred as <b>formal parameters</b>.</p>\r\n\r\n<HR>', '<h3>Function definition Syntax</h3>\r\n<p>\r\n the general syntax of function definition is,</p>\r\n<pre class=\"c language-clike\"><code class=\" language-clike\">returntype <span class=\"token function\">functionName</span><span class=\"token punctuation\">(</span>type1 parameter1<span class=\"token punctuation\">,</span> type2 parameter2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// function body goes here</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>The first line <i>returntype</i> <b>functionName(type1 parameter1, type2 parameter2,...)</b> is known as <b>function header</b> and the statement(s) within curly braces is called <b>function body</b>.</p>\r\n<p><b>Note:</b> While defining a function, there is no semicolon(<code>;</code>) after the parenthesis in the function header, unlike while declaring the function or calling the function.</p>\r\n', '<h4>functionbody</h4>\r\n<p>The function body contains the declarations and the statements(algorithm) necessary for performing the required task. The body is enclosed within curly braces <code>{ ... }</code> and consists of three parts.</p>\r\n<ul class=\"content\">\r\n<li><b>local</b> variable declaration(if required).</li>\r\n<li><b>function statements</b> to perform the task inside the function.</li>\r\n<li>a <b>return</b> statement to return the result evaluated by the function(if return type is <code>void</code>, then no return statement is required).</li>\r\n</ul>\r\n', '<h3>Time for an Example</h3>\r\n<p>Let\'s write a simple program with a <code>main()</code> function, and a user defined function to multiply two numbers, which will be called from the <code>main()</code> function.</p>\r\n<pre class=\"c language-clike\"><code class=\" language-clike\">#include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\n\r\nint <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>int a<span class=\"token punctuation\">,</span> int b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// function declaration</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \r\n<span class=\"token punctuation\">{</span>\r\n    int i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter 2 numbers you want to multiply...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    \r\n    result <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// function call</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The result of muliplication is: %d\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    \r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nint <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>int a<span class=\"token punctuation\">,</span> int b<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// function defintion, this can be done in one line</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n', NULL, NULL, NULL, NULL, 'functions', NULL, NULL, NULL);
INSERT INTO `c_lang` (`id`, `indextopic`, `content`, `syntax`, `syntaxdef`, `syntax2`, `syntaxdef2`, `example`, `exampledef`, `example2`, `exampledef2`, `searchword`, `keyword`, `diagram1`, `diagram2`, `diagram3`) VALUES
(25, 'Type of User-defined Functions in C', '\r\n<p>There can be 4 different types of user-defined <a href=\"user-defined-functions-in-c.php\" target=\"_blank\">functions</a>, they are:</p>\r\n<ol class=\"content\">\r\n<li>Function with no arguments and no return value</li>\r\n<li>Function with no arguments and a return value</li>\r\n<li>Function with arguments and no return value</li>\r\n<li>Function with arguments and a return value</li>\r\n</ol>\r\n', '<h2>Function with no arguments and no return value</h2>\r\n<BR>\r\n<p>Such functions can either be used to display information or they are completely dependent on user inputs.</p>\r\n<p>Below is an example of a function, which takes 2 numbers as input from user, and display which is the greater number.</p>\r\n<mark><pre class=\"c language-clike\"><code class=\" language-clike\">#include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\n\r\nvoid <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// function declaration</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// function call</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nvoid <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// function definition</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter 2 numbers that you want to compare...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The greater number is: %d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The greater number is: %d\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></mark>\r\n<HR>\r\n<BR>\r\n<h2>Function with no arguments and a return value</h2>\r\n<p>We have modified the above example to make the function <code>greatNum()</code> return the number which is greater amongst the 2 input numbers.</p>\r\n<mark><pre class=\"c language-clike\"><code class=\" language-clike\">#include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\n\r\nint <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// function declaration</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int result<span class=\"token punctuation\">;</span>\r\n    result <span class=\"token operator\">=</span> <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// function call</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The greater number is: %d\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nint <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// function definition</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> greaterNum<span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter 2 numbers that you want to compare...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        greaterNum <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        greaterNum <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">// returning the result</span>\r\n    <span class=\"token keyword\">return</span> greaterNum<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></mark>\r\n<HR>\r\n<BR>\r\n<h2>Function with arguments and no return value</h2>\r\n<p>We are using the same function as example again and again, to demonstrate that to solve a problem there can be many different ways.</p>\r\n<p>This time, we have modified the above example to make the function <code>greatNum()</code> take two <code>int</code> values as arguments, but it will not be returning anything.</p>\r\n<mark><pre class=\"c language-clike\"><code class=\" language-clike\">#include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\n\r\nvoid <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span>int a<span class=\"token punctuation\">,</span> int b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// function declaration</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter 2 numbers that you want to compare...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// function call</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nvoid <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> int y<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// function definition</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The greater number is: %d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The greater number is: %d\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></mark>\r\n<HR>\r\n<h2>Function with arguments and a return value</h2>\r\n<p>This is the best type, as this makes the function completely independent of inputs and outputs, and only the logic is defined inside the function body.</p>\r\n<mark><pre class=\"c language-clike\"><code class=\" language-clike\">#include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\n\r\nint <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span>int a<span class=\"token punctuation\">,</span> int b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// function declaration</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter 2 numbers that you want to compare...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    result <span class=\"token operator\">=</span> <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function call</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The greater number is: %d\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nint <span class=\"token function\">greatNum</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> int y<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// function definition</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></mark>\r\n', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'function userdefinedfunctions', NULL, NULL, NULL),
(26, 'What is Recursion?', '<p>Recursion is a special way of nesting functions, where a function calls itself inside it. We must have certain conditions in the function to break out of the recursion, otherwise recursion will occur infinite times.\r\n</p>', '<pre class=\"c language-clike\"><code class=\" language-clike\"><span class=\"token function\">function1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>   \r\n    <span class=\"token comment\">// function1 body</span>\r\n    <span class=\"token function\">function1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// function1 body</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', NULL, NULL, NULL, '<h4>Example: Factorial of a number using Recursion</h4>\r\n<pre class=\"c language-clike\"><code class=\" language-clike\">#include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\n\r\nint <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//declaring the function</span>\r\n\r\nvoid <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\r\n    \r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a number...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    b <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//calling the function named factorial</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nint <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">)</span> <span class=\"token comment\">//defining the function</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">else</span> \r\n        r <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//recursion, since the function calls itself</span>\r\n    \r\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', NULL, NULL, NULL, NULL, 'recursion', NULL, NULL, NULL),
(27, 'Types of Function calls in C', '<p><a href=\"user-defined-functions-in-c.php\" target=\"_blank\">Functions </a> are called by their names, we all know that, then what is this tutorial for? Well if the function does not have any arguments, then to call a function you can directly use its name. But for functions with arguments, we can call a function in two different ways, based on how we specify the arguments, and these two ways are:</p>\r\n<ol class=\"content\">\r\n<li>Call by Value</li>\r\n<li>Call by Reference</li>\r\n</ol><hr>', '<h2>Call by Value</h2>\r\n<p>Calling a function by value means, we pass the values of the arguments which are stored or copied into the formal parameters of the function. Hence, the original values are unchanged only the parameters inside the function changes. </p>\r\n', '\r\n<pre class=\"c language-clike\"><code class=\" language-clike\">#include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\n\r\nvoid <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// this will print the value of \'x\'</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nvalue of x in main is %d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nvoid <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// changing the value of \'x\'</span>\r\n    x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of x in calc function is %d \"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p class=\"output\">\r\nvalue of x in calc function is 20\r\nvalue of x in main is 10\r\n</p>\r\n\r\n<p>In this case, the actual <a href=\"variables-in-c.php\" target=\"_blank\">variable</a> <code>x</code> is not changed. This is because we are passing the argument by value, hence a copy of <code>x</code> is passed to the function, which is updated during function execution, and that copied value in the function is destroyed when the function ends(goes out of scope). So the variable <code>x</code> inside the <code>main()</code> function is never changed and hence, still holds a value of <code>10</code>.</p>', '<HR>\r\n<h2>Call by Reference</h2>\r\n<p>In call by reference we pass the address(reference) of a variable as argument to any function. When we pass the address of any variable as argument, then the function will have access to our variable, as it now knows where it is stored and hence can easily update its value.</p>\r\n<p>In this case the formal parameter can be taken as a <b>reference</b> or a <b><a href=\"pointers-in-c.php\" target=\"_blank\">pointers </a></b>(don\'t worry about pointers, we will soon learn about them), in both the cases they will change the values of the original variable. </p>', '<pre class=\"c language-clike\"><code class=\" language-clike\">#include<span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">&gt;</span>\r\n\r\nvoid <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// functin taking pointer as argument</span>\r\n\r\nint <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    int x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// passing address of \'x\' as argument</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of x is %d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nvoid <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>int <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//receiving the address in a reference pointer variable</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/*\r\n        changing the value directly that is \r\n        stored at the address passed\r\n    */</span>\r\n    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> \r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p class=\"output\">\r\nvalue of x is 20\r\n</p>\r\n<p><b>NOTE:</b> If you do not have any prior knowledge of pointers, do study <a href=\"pointers-in-c.php\" target=\"_blank\">Pointers</a> first. Or just go over this topic and come back again to revise this, once you have learned about pointers.</p>\r\n', NULL, NULL, NULL, NULL, NULL, 'callbyvalue callbyreference', NULL, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `c_quiz`
--

CREATE TABLE `c_quiz` (
  `id` int(2) NOT NULL,
  `name` text NOT NULL,
  `question` text NOT NULL,
  `answer` text NOT NULL,
  `choice1` text DEFAULT NULL,
  `choice2` text DEFAULT NULL,
  `choice3` text DEFAULT NULL,
  `choice4` text DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `java_lang`
--

CREATE TABLE `java_lang` (
  `id` int(2) NOT NULL,
  `indextopic` text NOT NULL,
  `content` text NOT NULL,
  `syntax` text DEFAULT NULL,
  `syntaxdef` text DEFAULT NULL,
  `syntax2` text DEFAULT NULL,
  `syntaxdef2` text DEFAULT NULL,
  `example` text DEFAULT NULL,
  `exampledef` text DEFAULT NULL,
  `example2` text DEFAULT NULL,
  `exampledef2` text DEFAULT NULL,
  `searchword` text DEFAULT NULL,
  `keyword` text DEFAULT NULL,
  `diagram1` text DEFAULT NULL,
  `diagram2` text DEFAULT NULL,
  `diagram3` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `java_quiz`
--

CREATE TABLE `java_quiz` (
  `id` int(2) NOT NULL,
  `name` text NOT NULL,
  `question` text NOT NULL,
  `answer` text NOT NULL,
  `choice1` text DEFAULT NULL,
  `choice2` text DEFAULT NULL,
  `choice3` text DEFAULT NULL,
  `choice4` text DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `prog_lang`
--

CREATE TABLE `prog_lang` (
  `id` int(2) NOT NULL,
  `name` text NOT NULL,
  `table_lang` text NOT NULL,
  `quiz_lang` text NOT NULL,
  `referbook` text NOT NULL,
  `referlink` text NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `prog_lang`
--

INSERT INTO `prog_lang` (`id`, `name`, `table_lang`, `quiz_lang`, `referbook`, `referlink`) VALUES
(1, 'C', 'c_lang', 'c_quiz', '', ''),
(2, 'C++', 'cpp_lang', 'cpp_quiz', '', ''),
(3, 'Java', 'java_lang', 'java_quiz', '', ''),
(4, 'Python', 'python_lang', 'python_quiz', '', ''),
(5, 'R', 'r_lang', 'r_quiz', '', '');

-- --------------------------------------------------------

--
-- Table structure for table `python_lang`
--

CREATE TABLE `python_lang` (
  `id` int(2) NOT NULL,
  `indextopic` text NOT NULL,
  `content` text NOT NULL,
  `syntax` text DEFAULT NULL,
  `syntaxdef` text DEFAULT NULL,
  `syntax2` text DEFAULT NULL,
  `syntaxdef2` text DEFAULT NULL,
  `example` text DEFAULT NULL,
  `exampledef` text DEFAULT NULL,
  `example2` text DEFAULT NULL,
  `exampledef2` text DEFAULT NULL,
  `searchword` text DEFAULT NULL,
  `keyword` text DEFAULT NULL,
  `diagram1` text DEFAULT NULL,
  `diagram2` text DEFAULT NULL,
  `diagram3` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `python_quiz`
--

CREATE TABLE `python_quiz` (
  `id` int(2) NOT NULL,
  `name` text NOT NULL,
  `question` text NOT NULL,
  `answer` text NOT NULL,
  `choice1` text DEFAULT NULL,
  `choice2` text DEFAULT NULL,
  `choice3` text DEFAULT NULL,
  `choice4` text DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `r_lang`
--

CREATE TABLE `r_lang` (
  `id` int(2) NOT NULL,
  `indextopic` text NOT NULL,
  `content` text NOT NULL,
  `syntax` text DEFAULT NULL,
  `syntaxdef` text DEFAULT NULL,
  `syntax2` text DEFAULT NULL,
  `syntaxdef2` text DEFAULT NULL,
  `example` text DEFAULT NULL,
  `exampledef` text DEFAULT NULL,
  `example2` text DEFAULT NULL,
  `exampledef2` text DEFAULT NULL,
  `searchword` text DEFAULT NULL,
  `keyword` text DEFAULT NULL,
  `diagram1` text DEFAULT NULL,
  `diagram2` text DEFAULT NULL,
  `diagram3` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `r_quiz`
--

CREATE TABLE `r_quiz` (
  `id` int(2) NOT NULL,
  `name` text NOT NULL,
  `question` text NOT NULL,
  `answer` text NOT NULL,
  `choice1` text DEFAULT NULL,
  `choice2` text DEFAULT NULL,
  `choice3` text DEFAULT NULL,
  `choice4` text DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `cpp_lang`
--
ALTER TABLE `cpp_lang`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `id` (`id`);

--
-- Indexes for table `cpp_quiz`
--
ALTER TABLE `cpp_quiz`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `c_lang`
--
ALTER TABLE `c_lang`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `c_quiz`
--
ALTER TABLE `c_quiz`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `java_lang`
--
ALTER TABLE `java_lang`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `java_quiz`
--
ALTER TABLE `java_quiz`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `prog_lang`
--
ALTER TABLE `prog_lang`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `python_lang`
--
ALTER TABLE `python_lang`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `python_quiz`
--
ALTER TABLE `python_quiz`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `r_lang`
--
ALTER TABLE `r_lang`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `r_quiz`
--
ALTER TABLE `r_quiz`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `cpp_lang`
--
ALTER TABLE `cpp_lang`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=46;

--
-- AUTO_INCREMENT for table `cpp_quiz`
--
ALTER TABLE `cpp_quiz`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `c_lang`
--
ALTER TABLE `c_lang`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=32;

--
-- AUTO_INCREMENT for table `c_quiz`
--
ALTER TABLE `c_quiz`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `java_lang`
--
ALTER TABLE `java_lang`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `java_quiz`
--
ALTER TABLE `java_quiz`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `prog_lang`
--
ALTER TABLE `prog_lang`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT for table `python_lang`
--
ALTER TABLE `python_lang`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `python_quiz`
--
ALTER TABLE `python_quiz`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `r_lang`
--
ALTER TABLE `r_lang`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `r_quiz`
--
ALTER TABLE `r_quiz`
  MODIFY `id` int(2) NOT NULL AUTO_INCREMENT;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
